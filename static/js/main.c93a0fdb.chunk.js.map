{"version":3,"sources":["store/actions/sortAlgos.ts","store/actions/actionTypes.ts","store/actions/path-finders/graphBFS.ts","store/actions/path-finders/graphDFS.ts","store/actions/path-finders/dijkstras.ts","store/actions/path-finders/mazeGen.ts","store/actions/pathAlgos.ts","components/custom/CustomSlider.tsx","containers/sorting-visualizers/MainApp.tsx","containers/path-finders/MainApp.tsx","components/main-page/navbar/Navbar.tsx","components/main-page/MainPage.tsx","components/UnderConstruction.tsx","containers/stacks-queues-lists/components/CustomButton/Button.tsx","containers/stacks-queues-lists/components/Stacks/Stacks.tsx","containers/stacks-queues-lists/components/Queues/Queues.tsx","containers/stacks-queues-lists/components/Navbar.tsx","containers/stacks-queues-lists/MainApp.tsx","App.tsx","serviceWorker.ts","store/reducers/sortAlgos.ts","store/reducers/pathAlgos.ts","index.tsx"],"names":["setRunning","param","type","insertionSort","payload","mergeSort","mergeSortArray","arr","speed","dispatch","params","mergeSortArr","l","r","mid","Math","floor","push","m","l1","val","idx","merge","length","dispatchAction","shift","setTimeout","quickSort","breadthFirstSearch","adjList","start","finish","visited","allVisitedNodes","path","relations","queue","bfs","vertex","forEach","node","includes","curVertex","reverse","depthFirstSearch","end","dfs","nextList","res","concat","PriorityQueue","values","this","priority","sort","a","b","Dijkstra","smallest","nodes","distances","previous","enqueue","Infinity","dequeue","neighbor","nextNode","candidate","nextNeighbor","getNeighbour","currentCell","row","col","neighbours","random","mazeGen","cellRes","stack","pop","cell","dir","next","maze","animate","CustomSlider","props","style","Slider","value","min","step","max","graduated","progress","onChange","v","onValChange","tooltip","withRouter","connect","state","array","swappers","sorted","running","newArray","size","bubbleSortArray","i","j","temp","selectionSortArray","minidx","insertionSortArray","currentVal","quickSortArray","pivot","swap","idx1","idx2","swapIdx","quickSortArr","left","right","pivotIndex","heapSortArray","arrLength","maxHeap","input","indexA","indexB","heapSortArr","calcSpeed","arrSize","useState","setArrSize","setSpeed","useEffect","Navbar","className","color","onClick","history","width","marginRight","ArrayBody","display","flexDirection","justifyContent","map","ele","backgroundColor","height","key","pathFinders","adjacencyList","pathList","visitedList","mazeBlocks","cellList","addVertex","addEdge","vertex1","vertex2","reset","onlyPath","resetWallPath","mazeGenerator","blocks","BFSGraphSearch","startVertex","endVertex","BFS","DFSGraphSearch","DFS","DijkstraGraphSearch","Dijstra","setStart","setFinish","dragWall","setDragWall","dragStart","setDragStart","dragFinish","setDragFinish","setRunnng","isMazed","setIsMazed","modifyAdjlist","console","log","dirs","newV1","filter","el","newV2","gridRow","gridCol","blockedWalls","document","getElementsByClassName","call","v1","id","v2","resetBoard","mazePath","querySelectorAll","classList","remove","walls","elems","visiteds","ends","softReset","gridId","interval","setInterval","getElementById","add","clearInterval","animatePath","handleMouseDown","e","target","toggle","handleMouseEnter","lastStart","lastFinish","grid","elements","classes","onMouseDown","onMouseUp","parseInt","onMouseEnter","fontSize","UnderConstruction","CustomButton","styles","handleButtonClick","children","StackDisplay","setStack","justAdded","setJustAdded","createStorageType","head","isHead","beheading","heading","createRandomStack","innerDisplay","handlePeek","element","undefined","oldStack","handlePush","handlePop","QueueDisplay","setQueue","tail","isTail","betailing","tailing","oldQueue","handleEnqueue","handleDequeue","StacksQueuesLists","to","exact","component","App","SortingVisualizers","PathFinders","MainPage","Boolean","window","location","hostname","match","initialState","reducer","action","indexOf","Array","from","keys","combineReducers","arrayReducer","pathReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c93a0fdb.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes'\r\n\r\nexport const newArray: (size: number) => Object = size => {\r\n    return {\r\n        type: actionTypes.GENERATE_NEW_ARRAY,\r\n        payload: {\r\n            size: size\r\n        }\r\n    }\r\n}\r\n\r\nexport const setRunning: (param: boolean) => Object = (param) => {\r\n    if(param){\r\n        return {\r\n            type: actionTypes.SET_RUNNING_TRUE\r\n        }\r\n    }\r\n    return {\r\n        type: actionTypes.SET_RUNNING_FALSE\r\n    }\r\n}\r\n\r\nexport const bubbleSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.BUBBLE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const bubbleSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(bubbleSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr.length - i - 1; j++) {\r\n                params.push([j, j + 1])\r\n                if (arr[j] > arr[j + 1]) {\r\n                    params.push([j, j + 1, 'swap'])\r\n                    let temp = arr[j + 1]\r\n                    arr[j + 1] = arr[j]\r\n                    arr[j] = temp\r\n\r\n                    params.push([...arr])\r\n                    params.push([])\r\n                }\r\n                else {\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n            params.push(arr.length - i - 1)\r\n        }\r\n        // console.log(params)\r\n        dispatchAction(params)\r\n\r\n    }\r\n}\r\n\r\nexport const selectionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.SELECTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const selectionSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(selectionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let minidx = i\r\n            let min = arr[minidx]\r\n            for (let j = i + 1; j < arr.length; j++) {\r\n                params.push([minidx, j])\r\n                if (min > arr[j]) {\r\n                    min = arr[j]\r\n                    minidx = j\r\n                }\r\n            }\r\n            arr[minidx] = arr[i]\r\n            arr[i] = min\r\n\r\n            params.push([minidx, i, 'swap'])\r\n            params.push([...arr])\r\n            params.push(i)\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const insertionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.INSERTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const insertionSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(insertionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(insertionSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        let currentVal;\r\n        for (let i = 1; i < arr.length; i++) {\r\n            currentVal = arr[i];\r\n            let j = i - 1\r\n            for (; j >= 0 && arr[j] > currentVal; j--) {\r\n                params.push([j + 1, j + 1])\r\n                arr[j + 1] = arr[j]\r\n\r\n                params.push([...arr])\r\n            }\r\n            params.push([j + 1, j + 1, 'insert'])\r\n            arr[j + 1] = currentVal;\r\n            params.push([...arr])\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const mergeSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.MERGE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const mergeSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(mergeSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(mergeSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // merge sort logic\r\n        const merge = (arr: number[], l: number, m: number, r: number) => {\r\n            let l1 = m + 1;\r\n            while (l <= m && l1 <= r) {\r\n                params.push([l, l1])\r\n                if (arr[l] <= arr[l1]) l++; // proper positions in the subarray\r\n                else {                      // shift the values and insert at correct place\r\n                    let val = arr[l1];\r\n                    let idx = l1;\r\n                    while (idx !== l) {\r\n                        arr[idx] = arr[idx - 1];\r\n                        idx--;\r\n                    }\r\n                    params.push([l, l1, 'swap'])\r\n                    arr[l] = val;\r\n                    l++;\r\n                    m++;\r\n                    l1++;\r\n                }\r\n                params.push([...arr])\r\n            }\r\n        }\r\n\r\n        const mergeSortArr = (arr: number[], l: number, r: number) => {\r\n            if (l < r) {\r\n                let mid = Math.floor((l + r) / 2);\r\n                mergeSortArr(arr, l, mid);\r\n                params.push([...arr])\r\n                mergeSortArr(arr, mid + 1, r);\r\n                params.push([...arr])\r\n                merge(arr, l, mid, r);\r\n            }\r\n        }\r\n        mergeSortArr(arr, 0, arr.length - 1)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const quickSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.QUICK_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const quickSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(quickSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(quickSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // quick sort logic\r\n        const pivot = (arr: number[], start = 0, end = arr.length - 1) => {\r\n            const swap = (arr: number[], idx1: number, idx2: number) => {\r\n                [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n            };\r\n\r\n            // We are assuming the pivot is always the first element\r\n            let pivot = arr[start];\r\n            let swapIdx = start;\r\n\r\n            for (let i = start + 1; i <= end; i++) {\r\n                if (pivot > arr[i]) {\r\n                    swapIdx++;\r\n                    swap(arr, swapIdx, i);\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n\r\n            // Swap the pivot from the start the swapPoint\r\n            swap(arr, start, swapIdx);\r\n            params.push([...arr])\r\n            return swapIdx;\r\n        }\r\n\r\n\r\n        const quickSortArr = (arr: number[], left = 0, right = arr.length - 1) => {\r\n            if (left < right) {\r\n                let pivotIndex = pivot(arr, left, right)\r\n                //left\r\n                quickSortArr(arr, left, pivotIndex - 1);\r\n                //right\r\n                quickSortArr(arr, pivotIndex + 1, right);\r\n            }\r\n        }\r\n        quickSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const heapSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.HEAP_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const heapSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(heapSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // heap sort logic\r\n        let arrLength: number\r\n        const maxHeap = (input: number[], i: number) => {\r\n            const left = 2 * i + 1\r\n            const right = 2 * i + 2\r\n            let max = i\r\n        \r\n            if (left < arrLength && input[left] > input[max]) {\r\n                max = left\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (right < arrLength && input[right] > input[max])     {\r\n                max = right\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (max !== i) {\r\n                params.push([max, i])\r\n                swap(input, i, max)\r\n                maxHeap(input, max)\r\n            }\r\n        }\r\n        \r\n        const swap = (input: number[], indexA: number, indexB: number) => {\r\n            params.push([indexA, indexB, 'swap'])\r\n            const temp = input[indexA]\r\n        \r\n            input[indexA] = input[indexB]\r\n            input[indexB] = temp\r\n\r\n            params.push([...input])\r\n        }\r\n        \r\n        const heapSortArr = (input: number[]) => {   \r\n            arrLength = input.length\r\n        \r\n            for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1)      {\r\n                maxHeap(input, i)\r\n              }\r\n        \r\n            for (let i = input.length - 1; i >= 0; i--) {\r\n                swap(input, 0, i)\r\n                arrLength--\r\n                params.push(i)\r\n                maxHeap(input, 0)\r\n            }\r\n            params.push([...arr])\r\n        }\r\n\r\n        heapSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}","export const GENERATE_NEW_ARRAY = 'GENERATE_NEW_ARRAY';\r\nexport const SET_RUNNING_TRUE = 'SET_RUNNING_TRUE';\r\nexport const SET_RUNNING_FALSE = 'SET_RUNNING_FALSE';\r\nexport const BUBBLE_SORT= 'BUBBLE_SORT'\r\nexport const SELECTION_SORT= 'SELECTION_SORT'\r\nexport const INSERTION_SORT= 'INSERTION_SORT'\r\nexport const MERGE_SORT= 'MERGE_SORT'\r\nexport const QUICK_SORT= 'QUICK_SORT'\r\nexport const HEAP_SORT= 'HEAP_SORT'\r\n\r\nexport const ADD_VERTEX = 'ADD_VERTEX'\r\nexport const ADD_EDGE = 'ADD_EDGE'\r\nexport const ANIMATE = 'ANIMATE'\r\nexport const MAZE_GEN = 'MAZE_GEN'\r\nexport const CLEAR_WALL_PATH = 'CLEAR_WALL_PATH'\r\nexport const CLEAR_PATH = 'CLEAR_PATH'","const breadthFirstSearch = (adjList: any, start: string, finish: string) => {\r\n    let visited: any = {};\r\n    let allVisitedNodes: string[] = []\r\n    let path: string[] = [];\r\n    let relations: any = {};\r\n    let queue = [start];\r\n\r\n    const bfs = (vertex: string | undefined) => {\r\n        if (vertex === finish) {\r\n            allVisitedNodes.push(vertex)\r\n\r\n            let curVertex = vertex\r\n            path.push(curVertex)\r\n            while (relations[curVertex]) {\r\n                curVertex = relations[curVertex]\r\n                path.push(curVertex)\r\n            }\r\n\r\n            return\r\n        }\r\n        if (!vertex) {\r\n            return\r\n        }\r\n\r\n        visited[vertex] = true\r\n        allVisitedNodes.push(vertex)\r\n\r\n        let nextList = adjList[vertex]\r\n        nextList.forEach((node: string) => {\r\n            if (!visited[node] && !queue.includes(node)) {\r\n                relations[node] = vertex\r\n                queue.push(node)\r\n            }\r\n        })\r\n\r\n        bfs(queue.shift())\r\n    }\r\n    bfs(queue.shift())\r\n\r\n    return [allVisitedNodes, path.reverse()]\r\n}\r\n\r\nexport default breadthFirstSearch","const depthFirstSearch = (adjList: any, start: string, end: string) => {\r\n    let visited: any = {};\r\n    let allVisitedNodes: string[] = [];\r\n    let path: string[] = [];\r\n    (function dfs(vertex: string) {\r\n        if (vertex === end) {\r\n            allVisitedNodes.push(vertex)\r\n            return vertex\r\n        }\r\n        if (!vertex) {\r\n            return 'done'\r\n        }\r\n\r\n        visited[vertex] = true\r\n        allVisitedNodes.push(vertex)\r\n        let nextList = adjList[vertex]\r\n        let idx = 0\r\n        let isEnd = false\r\n        while (idx < nextList.length && !isEnd) {\r\n            if (!visited[nextList[idx]]) {\r\n                let res = dfs(nextList[idx])\r\n                if (res && res !== 'done') {\r\n                    path.push(res)\r\n                    return vertex\r\n                }\r\n            }\r\n            idx++\r\n        }\r\n    })(start)\r\n\r\n    return [allVisitedNodes, path.concat(start).reverse()]\r\n}\r\n\r\nexport default depthFirstSearch","class PriorityQueue {\r\n    values: any[]\r\n    constructor() {\r\n        this.values = [];\r\n    }\r\n    enqueue(val: any, priority: any) {\r\n        this.values.push({ val, priority });\r\n        this.sort();\r\n    };\r\n    dequeue() {\r\n        return this.values.shift();\r\n    };\r\n    sort() {\r\n        this.values.sort((a, b) => a.priority - b.priority);\r\n    };\r\n}\r\n\r\nconst Dijkstra = (adjList: any, start: string, finish: string) => {\r\n    const nodes = new PriorityQueue();\r\n    const distances: any = {};\r\n    const previous: any = {};\r\n    let path: string[] = [] //to return at end\r\n    let smallest;\r\n    let allVisitedNodes: any = []\r\n    //build up initial state\r\n    for (let vertex in adjList) {\r\n        if (vertex === start) {\r\n            distances[vertex] = 0;\r\n            nodes.enqueue(vertex, 0);\r\n        } else {\r\n            distances[vertex] = Infinity;\r\n            nodes.enqueue(vertex, Infinity);\r\n        }\r\n        previous[vertex] = null;\r\n    }\r\n    // as long as there is something to visit\r\n    while (nodes.values.length) {\r\n        smallest = nodes.dequeue().val;\r\n        allVisitedNodes.push(smallest)\r\n        if (smallest === finish) {\r\n            //WE ARE DONE\r\n            //BUILD UP PATH TO RETURN AT END\r\n            while (previous[smallest]) {\r\n                path.push(smallest);\r\n                smallest = previous[smallest];\r\n            }\r\n            break;\r\n        }\r\n        if (smallest || distances[smallest] !== Infinity) {\r\n            for (let neighbor in adjList[smallest]) {\r\n                //find neighboring node\r\n                let nextNode = adjList[smallest][neighbor];\r\n                //calculate new distance to neighboring node\r\n                let candidate = distances[smallest] + 1;\r\n                let nextNeighbor = nextNode;\r\n                if (candidate < distances[nextNeighbor]) {\r\n                    //updating new smallest distance to neighbor\r\n                    distances[nextNeighbor] = candidate;\r\n                    //updating previous - How we got to neighbor\r\n                    previous[nextNeighbor] = smallest;\r\n                    //enqueue in priority queue with new priority\r\n                    nodes.enqueue(nextNeighbor, candidate);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [allVisitedNodes, path.concat(smallest).reverse()];\r\n}\r\n\r\nexport default Dijkstra","const getNeighbour = (currentCell: number, visited: Record<number, boolean>, row: number, col: number) => {\r\n    let neighbours = []\r\n    \r\n    // check top\r\n    if(currentCell-col>0 && !visited[currentCell-col])\r\n        neighbours.push([currentCell-col, 0])\r\n    // check left\r\n    if(currentCell-1>0 && (currentCell-1)%col!==0 && !visited[currentCell-1])\r\n        neighbours.push([currentCell-1, 1])\r\n    //check bottom\r\n    if(currentCell+col<=row*col && !visited[currentCell+col])\r\n        neighbours.push([currentCell+col, 2])\r\n    // check right\r\n    if(currentCell+1<=row*col && currentCell%col!==0 && !visited[currentCell+1])\r\n        neighbours.push([currentCell+1, 3])\r\n    \r\n    // randomly return a neighbour\r\n    if(neighbours.length > 0){\r\n        let randomNeighbour = Math.floor(Math.random() * neighbours.length)\r\n        return neighbours[randomNeighbour]\r\n    }\r\n    return undefined\r\n}\r\n\r\ninterface result {\r\n    cell: number,\r\n    dir: string\r\n}\r\n\r\nconst maze = ({ row, col }: { row: number; col: number; }) => {\r\n    // console.log(row, col)\r\n    let res: Array<result>  = []\r\n    let cellRes: Record<number, Array<string>> = {};\r\n\r\n    let stack: number[] = [] \r\n    let visited: Record<number, boolean> = {}\r\n    let currentCell: number = 1\r\n    visited[currentCell] = true\r\n    stack.push(currentCell)\r\n\r\n    while(stack.length > 0){\r\n        currentCell = stack.pop() !\r\n        res.push({\r\n            cell: currentCell,\r\n            dir: 'none'\r\n        })\r\n        if(!cellRes[currentCell]){\r\n            cellRes[currentCell] = [];\r\n        }\r\n        let next = getNeighbour(currentCell, visited, row, col)\r\n        if(next){\r\n            stack.push(currentCell)\r\n            switch (next[1]){\r\n                case 0:\r\n                    cellRes[currentCell].push('top')\r\n                    if(!cellRes[next[0]]){\r\n                        cellRes[next[0]] = []\r\n                    }\r\n                    cellRes[next[0]].push('bottom')\r\n                    res.push({\r\n                        cell: currentCell,\r\n                        dir: 'top'\r\n                    }, {\r\n                        cell: next[0],\r\n                        dir: 'bottom'\r\n                    })\r\n                    break\r\n                case 1:\r\n                    cellRes[currentCell].push('left')\r\n                    if(!cellRes[next[0]]){\r\n                        cellRes[next[0]] = []\r\n                    }\r\n                    cellRes[next[0]].push('right')\r\n                    res.push({\r\n                        cell: currentCell,\r\n                        dir: 'left'\r\n                    }, {\r\n                        cell: next[0],\r\n                        dir: 'right'\r\n                    })\r\n                    break\r\n                case 2:\r\n                    cellRes[currentCell].push('bottom')\r\n                    if(!cellRes[next[0]]){\r\n                        cellRes[next[0]] = []\r\n                    }\r\n                    cellRes[next[0]].push('top')\r\n                    res.push({\r\n                        cell: currentCell,\r\n                        dir: 'bottom'\r\n                    }, {\r\n                        cell: next[0],\r\n                        dir: 'top'\r\n                    })\r\n                    break\r\n                case 3:\r\n                    cellRes[currentCell].push('right')\r\n                    if(!cellRes[next[0]]){\r\n                        cellRes[next[0]] = []\r\n                    }\r\n                    cellRes[next[0]].push('left')\r\n                    res.push({\r\n                        cell: currentCell,\r\n                        dir: 'right'\r\n                    }, {\r\n                        cell: next[0],\r\n                        dir: 'left'\r\n                    })\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n            visited[next[0]] = true\r\n            stack.push(next[0])\r\n        }\r\n    }\r\n\r\n    return [res, cellRes]\r\n}\r\n\r\nconst mazeGen = (row: number, col: number, start: number, finish: number) => maze({row, col})\r\n\r\nexport default mazeGen","import * as actionTypes from './actionTypes'\r\n\r\nimport BFS from './path-finders/graphBFS'\r\nimport DFS from './path-finders/graphDFS'\r\nimport Dijstra from './path-finders/dijkstras'\r\nimport mazeGen from './path-finders/mazeGen'\r\n\r\nexport const addVertex: (vertex: string) => Object = (vertex) => {\r\n    return {\r\n        type: actionTypes.ADD_VERTEX,\r\n        payload: vertex\r\n    }\r\n}\r\n\r\nexport const addEdge: (vertex1: string, vertex2: string) => Object = (vertex1, vertex2) => {\r\n    return {\r\n        type: actionTypes.ADD_EDGE,\r\n        payload: {\r\n            vertex1,\r\n            vertex2\r\n        }\r\n    }\r\n}\r\n\r\nexport const animate: (path: string[], visited: string[]) => Object = (path, visited) => {\r\n    return {\r\n        type: actionTypes.ANIMATE,\r\n        payload: {\r\n            path,\r\n            visited\r\n        }\r\n    }\r\n}\r\n\r\nexport const DijkstraGraphSearch:\r\n    (adjList: any, startVertex: string, endVertex: string) => any\r\n    = (adjList, startVertex, endVertex) => {\r\n        return (dispatch: Function) => {\r\n            let [visited, path] = Dijstra(adjList, startVertex, endVertex)\r\n            dispatch(animate(path, visited))\r\n        }\r\n\r\n    }\r\n\r\nexport const BFSGraphSearch:\r\n    (adjList: any, startVertex: string, endVertex: string) => any\r\n    = (adjList, startVertex, endVertex) => {\r\n        return (dispatch: Function) => {\r\n            let [visited, path] = BFS(adjList, startVertex, endVertex)\r\n            dispatch(animate(path, visited))\r\n        }\r\n\r\n    }\r\n\r\nexport const DFSGraphSearch:\r\n    (adjList: any, startVertex: string, endVertex: string) => any\r\n    = (adjList, startVertex, endVertex) => {\r\n        return (dispatch: Function) => {\r\n            let [visited, path] = DFS(adjList, startVertex, endVertex)\r\n            dispatch(animate(path, visited))\r\n        }\r\n\r\n    }\r\n\r\nexport const mazeGenerator: (row: number, col: number, start: number, end: number) => Object = (row, col, start, end) => {\r\n    let blocks = mazeGen(row, col, start, end)\r\n    return {\r\n        type: actionTypes.MAZE_GEN,\r\n        payload: {\r\n            blocks: blocks[0],\r\n            cellList: blocks[1]\r\n        }\r\n    }\r\n}\r\n\r\nexport const resetWallPath: (onlyPath: boolean) => Object = (onlyPath) => {\r\n    if(onlyPath){\r\n        return {\r\n            type: actionTypes.CLEAR_PATH,\r\n            payload: {}\r\n        }\r\n    }\r\n    return {\r\n        type: actionTypes.CLEAR_WALL_PATH,\r\n        payload: {}\r\n    }\r\n}","import React from 'react'\r\nimport { Slider } from 'rsuite'\r\n\r\nconst CustomSlider = (props: any) => {\r\n  return (\r\n    <div style={{...props.style}}>\r\n      <Slider\r\n        value={props.val}\r\n        min={props.min}\r\n        step={props.step}\r\n        max={props.max}\r\n        graduated\r\n        progress\r\n        onChange={v => props.onValChange(v)}\r\n        tooltip={props.tooltip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomSlider","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    newArray,\r\n    bubbleSortArray,\r\n    selectionSortArray,\r\n    insertionSortArray,\r\n    mergeSortArray,\r\n    quickSortArray,\r\n    heapSortArray\r\n} from '../../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './MainApp.css'\r\n\r\nimport CustomSlider from '../../components/custom/CustomSlider'\r\n\r\nconst MainApp: React.FC = (props: any) => {\r\n    const calcSpeed = (arrSize: number) => {\r\n        if(arrSize > 60){\r\n            return Math.floor(110/arrSize);\r\n        }\r\n        return Math.floor((110/arrSize)*10);\r\n    }\r\n\r\n    const [arrSize, setArrSize] = useState(65);\r\n    const [speed, setSpeed] = useState(calcSpeed(arrSize));\r\n\r\n    const { newArray } = props;\r\n\r\n    useEffect(() => {\r\n        newArray(65)\r\n    }, [newArray])\r\n\r\n    const handleArrSize = (size: number) => {\r\n        if(!props.running){\r\n            setArrSize(size)\r\n            if (size !== arrSize){\r\n                props.newArray(size)\r\n                setSpeed(calcSpeed(size))\r\n            }\r\n        }\r\n    }\r\n\r\n    const Navbar = (\r\n        <div className='nav-bar'>\r\n            <div className='nav-bar-left'>\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running)\r\n                            props.history.push('/')\r\n                    }}  \r\n                >DSA PLAYGROUND</div>\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if (!props.running) props.newArray(arrSize)\r\n                    }}  \r\n                >Generate New Array</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.bubbleSortArray(props.arr, speed)\r\n                        }\r\n                }}>Bubble Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.insertionSortArray(props.arr, speed)\r\n                        }\r\n                }}>Insertion Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.selectionSortArray(props.arr, speed)\r\n                        }\r\n                }}>Selection Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.mergeSortArray(props.arr, speed)\r\n                        }\r\n                }}>Merge Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.quickSortArray(props.arr, speed)\r\n                        }\r\n                }}>Quick Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.heapSortArray(props.arr, speed)\r\n                        }\r\n                }}>Heap Sort</div>\r\n            </div>\r\n            <div className='nav-bar-right'>\r\n                <div className='size-element'>\r\n                    Size :\r\n                    </div>\r\n                <div className='size-element'>\r\n                    {arrSize}\r\n                </div>\r\n                <div className='slider'>\r\n                    <CustomSlider\r\n                        style={{\r\n                            width: 200,\r\n                            marginRight: 50\r\n                        }}\r\n                        val={arrSize}\r\n                        min={5}\r\n                        max={170}\r\n                        step={15}\r\n                        onValChange={handleArrSize}\r\n                        tooltip={false}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const ArrayBody = (\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\r\n            {props.arr.map((ele: number, idx: number) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: props.sorted.includes(idx) ? '#60FF60' :\r\n                                props.swappers.includes(idx) ? (props.swappers.length === 3 ? 'purple' : 'red') :\r\n                                    '#ffeeff',\r\n                            width: '50px',\r\n                            height: `${ele}px`\r\n                        }} key={idx}\r\n                    >\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className='main-app'>\r\n            {Navbar}\r\n            {ArrayBody}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        arr: state.array.arr,\r\n        swappers: state.array.swappers,\r\n        sorted: state.array.sorted,\r\n        running: state.array.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        newArray: (size: number) => dispatch(newArray(size)),\r\n        bubbleSortArray: (arr: number[], speed: number) => dispatch(bubbleSortArray(arr, speed)),\r\n        selectionSortArray: (arr: number[], speed: number) => dispatch(selectionSortArray(arr, speed)),\r\n        insertionSortArray: (arr: number[], speed: number) => dispatch(insertionSortArray(arr, speed)),\r\n        mergeSortArray: (arr: number[], speed: number) => dispatch(mergeSortArray(arr, speed)),\r\n        quickSortArray: (arr: number[], speed: number) => dispatch(quickSortArray(arr, speed)),\r\n        heapSortArray: (arr: number[], speed: number) => dispatch(heapSortArray(arr, speed))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainApp))","import React, { useState, useEffect } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './MainApp.css'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { addVertex, addEdge,\r\n    BFSGraphSearch, DFSGraphSearch, DijkstraGraphSearch, mazeGenerator, resetWallPath } from '../../store/actions'\r\n\r\nconst MainApp: React.FC = (props: any) => {\r\n    const gridRow = 31;\r\n    const gridCol = 69;\r\n\r\n    const [start, setStart] = useState(1045)\r\n    const [finish, setFinish] = useState(1095)\r\n    \r\n    const [dragWall, setDragWall] = useState(false)\r\n    const [dragStart, setDragStart] = useState(false)\r\n    const [dragFinish, setDragFinish] = useState(false)\r\n    \r\n    const [running, setRunnng] = useState(false)\r\n    const [isMazed, setIsMazed] = useState(false)\r\n\r\n    const modifyAdjlist = () => {\r\n        let adjList = {...props.adjList}\r\n        if(isMazed){\r\n            console.log(\"Modifying\")\r\n            let { cellList } = props\r\n            for(let i=1; i<=gridCol*gridRow; i++){\r\n                let dirs: Array<string> = cellList[i]\r\n                if(!dirs.includes('top') && i-gridCol>0){\r\n                    let newV1 = [...adjList[i]].filter((el: any) => +el!==i-gridCol)\r\n                    let newV2 = [...adjList[i-gridCol]].filter((el: any) => +el!==i)\r\n                    adjList[i] = newV1\r\n                    adjList[i-gridCol] = newV2\r\n                }\r\n                if(!dirs.includes('bottom') && i+gridCol<=gridRow*gridCol){\r\n                    let newV1 = [...adjList[i]].filter((el: any) => +el!==i+gridCol)\r\n                    let newV2 = [...adjList[i+gridCol]].filter((el: any) => +el!==i)\r\n                    adjList[i] = newV1\r\n                    adjList[i+gridCol] = newV2\r\n                }\r\n                if(!dirs.includes('left') && i-1>0 && (i-1)%gridCol!==0){\r\n                    let newV1 = [...adjList[i]].filter((el: any) => +el!==i-1)\r\n                    let newV2 = [...adjList[i-1]].filter((el: any) => +el!==i)\r\n                    adjList[i] = newV1\r\n                    adjList[i-1] = newV2\r\n                }\r\n                if(!dirs.includes('right') && i+1<=gridCol*gridRow && i%gridCol!==0){\r\n                    let newV1 = [...adjList[i]].filter((el: any) => +el!==i+1)\r\n                    let newV2 = [...adjList[i+1]].filter((el: any) => +el!==i)\r\n                    adjList[i] = newV1\r\n                    adjList[i+1] = newV2\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let blockedWalls = document.getElementsByClassName('block-wall');\r\n            [].forEach.call(blockedWalls, function (el: any) {\r\n                let v1 = +el.id\r\n                adjList[v1].forEach((v2: any) => {\r\n                    let newV2 = [...adjList[v2]].filter((el: any) => +el!==v1)\r\n                    adjList[v2] = newV2\r\n                })\r\n                delete adjList[v1]\r\n            });\r\n        }\r\n\r\n        return adjList\r\n    }\r\n\r\n    const resetBoard = () => {\r\n        setIsMazed(false)\r\n        props.reset()\r\n        let mazePath = document.querySelectorAll(\".visited-node\");\r\n        [].forEach.call(mazePath, function (el: any) {\r\n            el.classList.remove(\"visited-node\");\r\n        });\r\n        mazePath = document.querySelectorAll(\".top-wall-remove\");\r\n        [].forEach.call(mazePath, function (el: any) {\r\n            el.classList.remove(\"top-wall-remove\");\r\n        });\r\n        mazePath = document.querySelectorAll(\".bottom-wall-remove\");\r\n        [].forEach.call(mazePath, function (el: any) {\r\n            el.classList.remove(\"bottom-wall-remove\");\r\n        });\r\n        mazePath = document.querySelectorAll(\".left-wall-remove\");\r\n        [].forEach.call(mazePath, function (el: any) {\r\n            el.classList.remove(\"left-wall-remove\");\r\n        });\r\n        mazePath = document.querySelectorAll(\".right-wall-remove\");\r\n        [].forEach.call(mazePath, function (el: any) {\r\n            el.classList.remove(\"right-wall-remove\");\r\n        });\r\n\r\n\r\n        let walls = document.querySelectorAll(\".block-wall\");\r\n        [].forEach.call(walls, function (el: any) {\r\n            el.classList.remove(\"block-wall\");\r\n        });\r\n\r\n        let elems = document.querySelectorAll(\".path-grid\");\r\n        [].forEach.call(elems, function (el: any) {\r\n            el.classList.remove(\"path-grid\");\r\n        });\r\n\r\n        let visiteds = document.querySelectorAll(\".visited-grid\");\r\n        [].forEach.call(visiteds, function (el: any) {\r\n            el.classList.remove(\"visited-grid\");\r\n        });\r\n\r\n        let ends = document.querySelectorAll(\".found-path\");\r\n        [].forEach.call(ends, function (el: any) {\r\n            el.classList.remove(\"found-path\");\r\n        });\r\n    }\r\n\r\n    const softReset = () => {\r\n        props.reset(true)\r\n        let elems = document.querySelectorAll(\".path-grid\");\r\n        [].forEach.call(elems, function (el: any) {\r\n            el.classList.remove(\"path-grid\");\r\n        });\r\n\r\n        let visiteds = document.querySelectorAll(\".visited-grid\");\r\n        [].forEach.call(visiteds, function (el: any) {\r\n            el.classList.remove(\"visited-grid\");\r\n        });\r\n\r\n        let ends = document.querySelectorAll(\".found-path\");\r\n        [].forEach.call(ends, function (el: any) {\r\n            el.classList.remove(\"found-path\");\r\n        });\r\n    }\r\n\r\n    const Navbar = (\r\n        <div className='nav-bar'>\r\n            <div className='nav-bar-left'>\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        if(!running)\r\n                            props.history.push('/')\r\n                    }}\r\n                >DSA PLAYGROUND</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={async () => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            softReset()\r\n                            props.DijkstraGraphSearch(modifyAdjlist(), `${start}`, `${finish}`)\r\n                        }\r\n                    }}>Dijstra's Algorithm</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n\r\n                    }}>Astar Algorithm</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            softReset()\r\n                            props.DFSGraphSearch(modifyAdjlist(), `${start}`, `${finish}`)\r\n                        }\r\n                    }}>DFS Algorithm</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            softReset()\r\n                            props.BFSGraphSearch(modifyAdjlist(), `${start}`, `${finish}`)\r\n                        }\r\n                    }}>BFS Algorithm</div>\r\n            </div>\r\n            <div className='nav-bar-right'>\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            resetBoard()\r\n                            props.mazeGenerator(gridRow, gridCol, start, finish)\r\n                        }\r\n                        setIsMazed(true)\r\n                    }}\r\n                >Maze Generator</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        if(!running)\r\n                            resetBoard()\r\n                    }}\r\n                >Clear Board</div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const { addEdge, addVertex } = props\r\n    useEffect(() => {\r\n        for (let row = 0; row < gridRow; row++) {\r\n            for (let col = 0; col < gridCol; col++) {\r\n                let gridId = col + 1 + (row * gridCol)\r\n                addVertex(`${gridId}`)\r\n                if (gridId - 1 > 0 && (gridId - 1) % gridCol !== 0) {\r\n                    addEdge(`${gridId}`, `${gridId - 1}`)\r\n                }\r\n                if (gridId - gridCol > 0) {\r\n                    addEdge(`${gridId}`, `${gridId - gridCol}`)\r\n                }\r\n            }\r\n        }\r\n    }, [addEdge, addVertex])\r\n\r\n    const { pathList } = props\r\n    const animatePath = () => {\r\n        let idx = 0\r\n        if(pathList.length > 1){\r\n            const interval = setInterval(() => {\r\n                if (idx !== pathList.length) {\r\n                    document.getElementById(pathList[idx])?.classList.add('path-grid');\r\n                    idx++;\r\n                }\r\n                else {\r\n                    if(visitedList.length > 0){\r\n                        setRunnng(false)\r\n                    }\r\n                    clearInterval(interval)\r\n                    document.getElementById(`${start}`)?.classList.add('found-path')\r\n                    document.getElementById(`${finish}`)?.classList.add('found-path')\r\n                }\r\n            }, 50)\r\n        }\r\n        else if(visitedList.length > 0){\r\n            setRunnng(false)\r\n        }\r\n    }\r\n\r\n    let { visitedList } = props;\r\n    useEffect(() => {\r\n        let idx = 0\r\n        const interval = setInterval(() => {\r\n            // console.log(idx, visitedList[idx])\r\n            if (visitedList.length > 0 && idx !== visitedList.length) {\r\n                document.getElementById(visitedList[idx])?.classList.add('visited-grid');\r\n                idx++;\r\n            }\r\n            else {\r\n                animatePath()\r\n                clearInterval(interval)\r\n            }\r\n        }, 10)\r\n    }, [visitedList])\r\n\r\n    let { mazeBlocks } = props\r\n    useEffect(() => {\r\n        if (mazeBlocks.length > 0) {\r\n            let idx = 0\r\n            const interval = setInterval(() => {\r\n                if(document.getElementsByClassName('none-wall-remove')[0])\r\n                    document.getElementsByClassName('none-wall-remove')[0].classList.remove('none-wall-remove')\r\n                if(mazeBlocks[idx].dir === 'none'){\r\n                    document.getElementById(`${mazeBlocks[idx].cell}`)?.classList.add(`${mazeBlocks[idx].dir}-wall-remove`);\r\n                    document.getElementById(`${mazeBlocks[idx].cell}`)?.classList.add('visited-node')\r\n                }\r\n                else{\r\n                    document.getElementById(`${mazeBlocks[idx].cell}`)?.classList.add(`${mazeBlocks[idx].dir}-wall-remove`);\r\n                }\r\n                if (idx === mazeBlocks.length-1) {\r\n                    document.getElementsByClassName('none-wall-remove')[0].classList.remove('none-wall-remove')\r\n                    setRunnng(false)\r\n                    clearInterval(interval)\r\n                }\r\n                idx++;\r\n            }, 1)\r\n        }\r\n    }, [mazeBlocks])\r\n\r\n    const handleMouseDown = (e: any, gridId: any) => {\r\n        if (gridId !== start && gridId !== finish) {\r\n            e.target.classList.toggle('block-wall')\r\n            setDragWall(true)\r\n        }\r\n        else {\r\n            if (gridId === start)\r\n                setDragStart(true)\r\n            else\r\n                setDragFinish(true)\r\n        }\r\n    }\r\n\r\n    const handleMouseEnter = (e: any, gridId: any) => {\r\n        if (dragWall && gridId !== start && gridId !== finish) {\r\n            e.target.classList.toggle('block-wall')\r\n        }\r\n        else if (dragStart) {\r\n            let lastStart = document.getElementsByClassName('start-grid-element')[0]\r\n            lastStart.classList.remove('start-grid-element')\r\n            lastStart.classList.remove('fas')\r\n            lastStart.classList.remove('fa-running')\r\n            document.getElementById(e.target.id)?.classList.add('start-grid-element')\r\n            document.getElementById(e.target.id)?.classList.add('fas')\r\n            document.getElementById(e.target.id)?.classList.add('fa-running')\r\n        }\r\n        else if (dragFinish) {\r\n            let lastFinish = document.getElementsByClassName('finish-grid-element')[0]\r\n            lastFinish.classList.remove('finish-grid-element')\r\n            lastFinish.classList.remove('fas')\r\n            lastFinish.classList.remove('fa-home')\r\n            document.getElementById(e.target.id)?.classList.add('finish-grid-element')\r\n            document.getElementById(e.target.id)?.classList.add('fas')\r\n            document.getElementById(e.target.id)?.classList.add('fa-home')\r\n        }\r\n    }\r\n\r\n    let grid: any[] = []\r\n    for (let row = 0; row < gridRow; row++) {\r\n        let elements = []\r\n        for (let col = 0; col < gridCol; col++) {\r\n            let gridId = col + 1 + (row * gridCol)\r\n\r\n            let classes = 'grid-element'\r\n            if (row === gridRow - 1) {\r\n                classes += ' border-bottom'\r\n            }\r\n            if (col === gridCol - 1) {\r\n                classes += ' border-right'\r\n            }\r\n            if (gridId === start) {\r\n                classes += ' start-grid-element fas fa-running'\r\n            }\r\n            if (gridId === finish) {\r\n                classes += ' finish-grid-element fas fa-home'\r\n            }\r\n\r\n            elements.push(\r\n                <div\r\n                    key={col}\r\n                    className={classes}\r\n                    id={`${gridId}`}\r\n\r\n                    onMouseDown={(e: any) => {\r\n                        if(!running && !isMazed)\r\n                            handleMouseDown(e, gridId)\r\n                    }}\r\n                    onMouseUp={() => {\r\n                        if(!running && !isMazed){\r\n                            setDragWall(false)\r\n                            setDragFinish(false)\r\n                            setDragStart(false)\r\n                            setStart(parseInt(document.getElementsByClassName('start-grid-element')[0].id))\r\n                            setFinish(parseInt(document.getElementsByClassName('finish-grid-element')[0].id))\r\n                        }\r\n                    }}\r\n                    onMouseEnter={(e: any) => {\r\n                        if(!running && !isMazed)\r\n                            handleMouseEnter(e, gridId)\r\n                    }}\r\n                >\r\n                </div>\r\n            )\r\n        }\r\n        grid.push(\r\n            <div key={row} className='grid-row'>\r\n                {elements}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        return resetBoard\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {Navbar}\r\n            <div className='grid-main'>\r\n                {grid}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        adjList: state.pathFinders.adjacencyList,\r\n        pathList: state.pathFinders.pathList,\r\n        visitedList: state.pathFinders.visited,\r\n        mazeBlocks: state.pathFinders.mazeBlocks,\r\n        cellList: state.pathFinders.cellList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addVertex: (vertex: string) => dispatch(addVertex(vertex)),\r\n        addEdge: (vertex1: string, vertex2: string) => dispatch(addEdge(vertex1, vertex2)),\r\n        reset: (onlyPath: boolean) => dispatch(resetWallPath(onlyPath)),\r\n        mazeGenerator: (row: number, col: number, start: number, finish: number) => dispatch(mazeGenerator(row, col, start, finish)),\r\n        BFSGraphSearch: (adjList: Object, startVertex: string, endVertex: string) => dispatch(BFSGraphSearch(adjList, startVertex, endVertex)),\r\n        DFSGraphSearch: (adjList: Object, startVertex: string, endVertex: string) => dispatch(DFSGraphSearch(adjList, startVertex, endVertex)),\r\n        DijkstraGraphSearch: (adjList: Object, startVertex: string, endVertex: string) => dispatch(DijkstraGraphSearch(adjList, startVertex, endVertex))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainApp))","import React from 'react';\r\nimport { withRouter } from 'react-router-dom'\r\nimport './Navbar.css'\r\n\r\nconst CustomNavbar = (props: any) => (\r\n    <div className='nav-bar'>\r\n        <div className='nav-bar-left'>\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/')\r\n                }}  \r\n            >DSA PLAYGROUND</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/sorting-visualizers')\r\n            }}>Sorting Visualizers</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/stacks-queues-lists')\r\n            }}>Stacks, Queues and List</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Tree Data Structure</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Graph Data Structure</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/path-finders')    \r\n            }}>Path Finders</div>\r\n        </div>\r\n        <div className='nav-bar-right'>\r\n          <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Random User</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default withRouter(CustomNavbar)","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport CustomNavbar from './navbar/Navbar'\r\n\r\nimport './MainPage.css'\r\n\r\nconst MainPage: React.FC = (props: any) => {\r\n    return (\r\n        <div className='main-page'>\r\n            <CustomNavbar />\r\n            <div className='under-construction'>\r\n                <h1>\r\n                    SITE UNDER CONSTRUCTION\r\n                </h1>\r\n                <div className='grid-view'>\r\n                    <div className='display-box' onClick={() => props.history.push('/sorting-visualizers')}>\r\n                        <i className=\"fas fa-chart-bar\" style={{fontSize: 32, marginRight: 10}}></i>\r\n                        <p style={{fontSize: 24}}>Sorting Visualizers</p>\r\n                    </div>\r\n                </div>\r\n                <div className='grid-view'>\r\n                    <div className='display-box' onClick={() => props.history.push('/path-finders')}>\r\n                        <i className=\"fas fa-road\" style={{fontSize: 32, marginRight: 10}}></i>\r\n                        <p style={{fontSize: 24}}>Path Finders</p>\r\n                    </div>\r\n                </div>\r\n                <div className='grid-view'>\r\n                    <div className='display-box' onClick={() => props.history.push('/stacks-queues-lists')}>\r\n                        <i className=\"fab fa-stack-overflow\" style={{fontSize: 32, marginRight: 10}}></i>\r\n                        <p style={{fontSize: 24}}>Stacks, Queues & List</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(MainPage);","import React from 'react'\r\n\r\nconst UnderConstruction = () => {\r\n    return (\r\n        <h1>\r\n            WORKING ON IT\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default UnderConstruction","import React from 'react'\r\nimport './Button.css'\r\n\r\nconst CustomButton = (props: any) => {\r\n\r\n    return (\r\n        <div \r\n            className='custom-button' \r\n            style={{...props.styles}}\r\n            onClick={props.handleButtonClick}    \r\n        >\r\n            <div className='button-name'>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomButton","import React, { useState, useEffect } from 'react'\r\nimport './Stacks.css'\r\n\r\nimport CustomButton from '../CustomButton/Button'\r\n\r\ninterface storageType {\r\n    val: number,\r\n    isHead: boolean,\r\n    beheading: boolean,\r\n    heading: boolean\r\n}\r\n\r\nconst StackDisplay = () => {\r\n    const [stack, setStack] = useState<Array<storageType>>([])\r\n    const [justAdded, setJustAdded] = useState(false)\r\n\r\n    const createStorageType = (head: boolean = false) => {\r\n        let val: number\r\n        let isHead: boolean\r\n        let beheading: boolean\r\n        let heading: boolean\r\n\r\n        val = Math.floor(Math.random() * 100)\r\n        isHead = head\r\n        beheading = false\r\n        heading = false\r\n\r\n        return {\r\n            val,\r\n            isHead,\r\n            beheading,\r\n            heading\r\n        }\r\n    }\r\n\r\n    const createRandomStack = () => {\r\n        let elements: Array<storageType> = []\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            i === 0 ? elements.push(createStorageType(true)) : elements.push(createStorageType())\r\n        }\r\n\r\n        return elements\r\n    }\r\n\r\n    useEffect(() => {\r\n        let elements = createRandomStack()\r\n        setStack(elements)\r\n    }, [])\r\n\r\n    const handlePush = (ele: storageType | undefined = undefined) => {\r\n        let element: storageType\r\n        if (ele === undefined) {\r\n            element = createStorageType()\r\n        }\r\n        else {\r\n            element = ele\r\n        }\r\n\r\n        let oldStack = [...stack]\r\n        setStack([element, ...oldStack])\r\n\r\n        setTimeout(() => {\r\n            element.heading = true\r\n            if (oldStack[0])\r\n                oldStack[0].beheading = true\r\n            setStack([element, ...oldStack])\r\n            setTimeout(() => {\r\n                if (oldStack[0]) {\r\n                    oldStack[0].isHead = false\r\n                    oldStack[0].beheading = false\r\n                }\r\n                element.heading = false\r\n                element.isHead = true\r\n                setStack([element, ...oldStack])\r\n\r\n                setJustAdded(false)\r\n            }, 500)\r\n        }, 500)\r\n    }\r\n\r\n    const handlePop = () => {\r\n        if (stack.length > 0) {\r\n\r\n            let oldStack = [...stack]\r\n            oldStack[0].beheading = true\r\n            if (oldStack[1])\r\n                oldStack[1].heading = true\r\n\r\n            setStack([...oldStack])\r\n\r\n            setTimeout(() => {\r\n                oldStack[0].beheading = false\r\n                oldStack[0].isHead = false\r\n                if (oldStack[1]) {\r\n                    oldStack[1].heading = false\r\n                    oldStack[1].isHead = true\r\n                }\r\n\r\n                setStack([...oldStack])\r\n\r\n                setTimeout(() => {\r\n                    oldStack.shift()\r\n                    setStack([...oldStack])\r\n                }, 500)\r\n            }, 500)\r\n        }\r\n    }\r\n\r\n    const handlePeek = () => {\r\n        let head = document.getElementsByClassName('stack-element')[0]\r\n        if(head){\r\n            head.classList.add('peek-element')\r\n            setTimeout(() => {\r\n                head.classList.remove('peek-element')\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='main-display'>\r\n            <div className='left-section'>\r\n                <div className='display-section'>\r\n                    {stack.map((ele: storageType, idx: number) => {\r\n                        let classes = 'stack-element'\r\n                        let innerDisplay\r\n\r\n                        if (ele.isHead && ele.beheading) {\r\n                            if (!justAdded) {\r\n                                classes += ' being-behead'\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>head/temp</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            else {\r\n                                classes += ' being-behead'\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>head</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                        else if (ele.isHead) {\r\n                            classes += ' head-element'\r\n                            innerDisplay = (\r\n                                <div>\r\n                                    {ele.val}\r\n                                    <div>head</div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        else if (ele.heading) {\r\n                            classes += ' being-head'\r\n                            if (justAdded) {\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>temp</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            else {\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                        else {\r\n                            innerDisplay = (\r\n                                <div>{ele.val}</div>\r\n                            )\r\n                        }\r\n\r\n                        return (\r\n                            <div className={classes} key={idx}>\r\n                                {innerDisplay}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='right-section'>\r\n                <div className='options'>\r\n                    <div className='option-row'>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                setStack(createRandomStack())\r\n                            }}\r\n                        >Create</CustomButton>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                handlePeek()\r\n                            }}\r\n                        >Peek</CustomButton>\r\n                    </div>\r\n                    <div className='option-row'>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                setJustAdded(true)\r\n                                handlePush()\r\n                            }}\r\n                        >Push</CustomButton>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                handlePop()\r\n                            }}\r\n                        >Pop</CustomButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StackDisplay","import React, { useState, useEffect } from 'react'\r\nimport './Queues.css'\r\n\r\nimport CustomButton from '../CustomButton/Button'\r\n\r\ninterface storageType {\r\n    val : number,\r\n    isHead : boolean,\r\n    beheading : boolean,\r\n    heading : boolean,\r\n    isTail : boolean,\r\n    betailing : boolean,\r\n    tailing : boolean\r\n}\r\n\r\nconst QueueDisplay = () => {\r\n    const [queue, setQueue] = useState<Array<storageType>>([])\r\n    const [justAdded, setJustAdded] = useState(false)\r\n\r\n    const createStorageType = (head: boolean = false, tail: boolean = false) => {\r\n        let val: number\r\n        let isHead: boolean\r\n        let beheading: boolean\r\n        let heading: boolean\r\n        let isTail: boolean\r\n        let betailing: boolean\r\n        let tailing: boolean\r\n\r\n        val = Math.floor(Math.random() * 100)\r\n        isHead = head\r\n        beheading = false\r\n        heading = false\r\n        isTail = tail\r\n        betailing = false\r\n        tailing = false\r\n\r\n        return {\r\n            val,\r\n            isHead,\r\n            beheading,\r\n            heading,\r\n            isTail,\r\n            betailing,\r\n            tailing\r\n        }\r\n    }\r\n\r\n    const createRandomStack = () => {\r\n        let elements: Array<storageType> = []\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            i === 0 ? elements.push(createStorageType(true)) : i === 4? elements.push(createStorageType(false, true)) : elements.push(createStorageType())\r\n        }\r\n\r\n        return elements\r\n    }\r\n\r\n    useEffect(() => {\r\n        let elements = createRandomStack()\r\n        setQueue(elements)\r\n    }, [])\r\n\r\n    const handleEnqueue = () => {\r\n        let element = createStorageType()\r\n\r\n        let oldQueue = [...queue]\r\n        let size = oldQueue.length\r\n        setQueue([...oldQueue, element])\r\n\r\n        setTimeout(() => {\r\n            element.tailing = true\r\n            if (oldQueue[size-1])\r\n                oldQueue[size-1].betailing = true\r\n            setQueue([...oldQueue, element])\r\n            setTimeout(() => {\r\n                if (oldQueue[size-1]) {\r\n                    oldQueue[size-1].isTail = false\r\n                    oldQueue[size-1].betailing = false\r\n                }\r\n                element.tailing = false\r\n                element.isTail = true\r\n                if(size === 0)\r\n                    element.isHead = true\r\n                setQueue([...oldQueue, element])\r\n\r\n                setJustAdded(false)\r\n            }, 500)\r\n        }, 500)\r\n    }\r\n\r\n    const handleDequeue = () => {\r\n        if (queue.length > 0) {\r\n\r\n            let oldQueue = [...queue]\r\n            oldQueue[0].beheading = true\r\n            if (oldQueue[1])\r\n                oldQueue[1].heading = true\r\n\r\n            setQueue([...oldQueue])\r\n\r\n            setTimeout(() => {\r\n                oldQueue[0].beheading = false\r\n                oldQueue[0].isHead = false\r\n                if (oldQueue[1]) {\r\n                    oldQueue[1].heading = false\r\n                    oldQueue[1].isHead = true\r\n                }\r\n\r\n                setQueue([...oldQueue])\r\n\r\n                setTimeout(() => {\r\n                    oldQueue.shift()\r\n                    setQueue([...oldQueue])\r\n                }, 500)\r\n            }, 500)\r\n        }\r\n    }\r\n\r\n    const handlePeek = () => {\r\n        let head = document.getElementsByClassName('queue-element')[0]\r\n        if(head){\r\n            head.classList.add('peek-element')\r\n            setTimeout(() => {\r\n                head.classList.remove('peek-element')\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='main-display'>\r\n            <div className='left-section'>\r\n                <div className='display-section'>\r\n                    {queue.map((ele: storageType, idx: number) => {\r\n                        let classes = 'queue-element'\r\n                        let innerDisplay\r\n\r\n                        if(ele.isTail && ele.isHead){\r\n                            classes += ' head-element'\r\n                            innerDisplay = (\r\n                                <div>\r\n                                    {ele.val}\r\n                                    <div>head/tail</div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        else if (ele.isHead && ele.beheading) {\r\n                            if (!justAdded) {\r\n                                classes += ' being-behead'\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>head/temp</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            else {\r\n                                classes += ' being-behead'\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>head</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                        else if (ele.isHead) {\r\n                            classes += ' head-element'\r\n                            innerDisplay = (\r\n                                <div>\r\n                                    {ele.val}\r\n                                    <div>head</div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        else if (ele.isTail && ele.betailing) {\r\n                            if (!justAdded) {\r\n                                classes += ' being-behead'\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>tail/temp</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            else {\r\n                                classes += ' being-behead'\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>tail</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                        else if (ele.isTail) {\r\n                            classes += ' head-element'\r\n                            innerDisplay = (\r\n                                <div>\r\n                                    {ele.val}\r\n                                    <div>tail</div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        else if (ele.heading) {\r\n                            classes += ' being-head'\r\n                            if (justAdded) {\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>temp</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            else {\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                        else if (ele.tailing) {\r\n                            classes += ' being-head'\r\n                            if (justAdded) {\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                        <div>temp</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            else {\r\n                                innerDisplay = (\r\n                                    <div>\r\n                                        {ele.val}\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        }\r\n                        else {\r\n                            innerDisplay = (\r\n                                <div>{ele.val}</div>\r\n                            )\r\n                        }\r\n\r\n                        return (\r\n                            <div className={classes} key={idx}>\r\n                                {innerDisplay}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='right-section'>\r\n                <div className='options'>\r\n                    <div className='option-row'>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                setQueue(createRandomStack())\r\n                            }}\r\n                        >Create</CustomButton>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                handlePeek()\r\n                            }}\r\n                        >Peek</CustomButton>\r\n                    </div>\r\n                    <div className='option-row'>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                setJustAdded(true)\r\n                                handleEnqueue()\r\n                            }}\r\n                        >EnQueue</CustomButton>\r\n                        <CustomButton\r\n                            styles={{ width: '49%', height: '98%' }}\r\n                            handleButtonClick={() => {\r\n                                handleDequeue()\r\n                            }}\r\n                        >DeQueue</CustomButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueueDisplay","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n// uses same styles as main navbar\r\n\r\nconst Navbar = (props: any) =>  (\r\n    <div className='nav-bar'>\r\n        <div className='nav-bar-left'>\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/')\r\n                }}\r\n            >DSA PLAYGROUND</div>\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/stacks-queues-lists/stacks')\r\n                }}\r\n            >Stacks</div>\r\n\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/stacks-queues-lists/queues')\r\n                }}>Queues</div>\r\n\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/stacks-queues-lists/singly-linked-lists')\r\n                }}>Linked List</div>\r\n\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/stacks-queues-lists/doubly-linked-lists')\r\n                }}>Doubly Linked List</div>\r\n        </div>\r\n        <div className='nav-bar-right'>\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n\r\n                }}>Some Option</div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default withRouter(Navbar)","import React from 'react'\r\nimport './MainApp.css'\r\nimport StackDisplay from './components/Stacks/Stacks'\r\nimport QueueDisplay from './components/Queues/Queues'\r\nimport Navbar from './components/Navbar'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nconst StacksQueuesLists: React.FC = (props: any) => {\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <Redirect path=\"/stacks-queues-lists/\" to=\"/stacks-queues-lists/stacks\" />\r\n            <Route path=\"/stacks-queues-lists/stacks\" exact component={StackDisplay} />\r\n            <Route path=\"/stacks-queues-lists/queues\" exact component={QueueDisplay} />\r\n            <Route path=\"/stacks-queues-lists/singly-linked-lists\" exact component={StackDisplay} />\r\n            <Route path=\"/stacks-queues-lists/doubly-linked-lists\" exact component={StackDisplay} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StacksQueuesLists","import React from 'react';\r\nimport './App.css';\r\nimport SortingVisualizers from './containers/sorting-visualizers/MainApp'\r\nimport PathFinders from './containers/path-finders/MainApp'\r\nimport MainPage from './components/main-page/MainPage'\r\n\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport UnderConstruction from './components/UnderConstruction';\r\nimport StacksQueuesLists from './containers/stacks-queues-lists/MainApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/sorting-visualizers\" exact component={SortingVisualizers} />\r\n        <Route path=\"/stacks-queues-lists/*\" exact component={StacksQueuesLists} />\r\n        <Redirect path=\"/stacks-queues-lists/\" to=\"/stacks-queues-lists/stacks\" />\r\n        <Route path=\"/path-finders\" exact component={PathFinders} />\r\n        <Route path=\"/\" component={MainPage} />\r\n      </Switch>\r\n      <Route path=\"/under-construction\" exact component={UnderConstruction} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\r\n\r\nlet initialState: {\r\n    arr: number[],\r\n    swappers: number[],\r\n    sorted: number[],\r\n    running: boolean\r\n} = {\r\n    arr: [],\r\n    swappers: [],\r\n    sorted: [],\r\n    running: false\r\n}\r\n\r\nconst reducer = (state = initialState, action: { type: string, payload: any }) => {\r\n    let arr = [];\r\n    switch (action.type) {\r\n        case actionTypes.GENERATE_NEW_ARRAY:\r\n            while (arr.length < action.payload.size) {\r\n                let r = Math.floor(Math.random() * 500) + 1;\r\n                if (arr.indexOf(r) === -1) arr.push(r);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                arr,\r\n                swappers: [],\r\n                sorted: []\r\n            }\r\n\r\n        case actionTypes.SET_RUNNING_TRUE:\r\n            return {\r\n                ...state,\r\n                running: true,\r\n                swappers: [],\r\n                sorted: []\r\n            }\r\n        \r\n        case actionTypes.SET_RUNNING_FALSE:\r\n            return {\r\n                ...state,\r\n                running: false\r\n            }\r\n\r\n        case actionTypes.BUBBLE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload]\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    swappers: action.payload\r\n                }\r\n            }\r\n\r\n        case actionTypes.SELECTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.INSERTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.MERGE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.QUICK_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.HEAP_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\r\n\r\nlet initialState: {\r\n    adjacencyList: any,\r\n    pathList: string[],\r\n    visited: string[],\r\n    mazeBlocks: string[],\r\n    cellList: Record<number, Array<string>>\r\n} = {\r\n    adjacencyList: {},\r\n    pathList: [],\r\n    visited: [],\r\n    mazeBlocks: [],\r\n    cellList: {}\r\n}\r\n\r\nconst reducer = (state = initialState, action: { type: string, payload: any }) => {\r\n    let adjList: any\r\n    switch (action.type) {\r\n        case actionTypes.ADD_VERTEX:\r\n            adjList = { ...state.adjacencyList }\r\n            adjList[action.payload] = []\r\n            return {\r\n                ...state,\r\n                adjacencyList: adjList\r\n            }\r\n\r\n        case actionTypes.ADD_EDGE:\r\n            let { vertex1, vertex2 } = action.payload\r\n            adjList = { ...state.adjacencyList }\r\n            adjList[vertex1].push(vertex2)\r\n            adjList[vertex2].push(vertex1)\r\n            return {\r\n                ...state,\r\n                adjacencyList: adjList\r\n            }\r\n\r\n        case actionTypes.ANIMATE:\r\n            let { visited, path } = action.payload\r\n            return {\r\n                ...state,\r\n                visited: visited,\r\n                pathList: path\r\n            }\r\n\r\n        case actionTypes.MAZE_GEN:\r\n            let { blocks, cellList } = action.payload\r\n            return {\r\n                ...state,\r\n                mazeBlocks: blocks,\r\n                cellList: cellList\r\n            }\r\n\r\n        case actionTypes.CLEAR_WALL_PATH:\r\n            return {\r\n                ...state,\r\n                mazeBlocks: [],\r\n                visited: [],\r\n                pathList: [],\r\n                cellList: []\r\n            }\r\n\r\n        case actionTypes.CLEAR_PATH:\r\n            return {\r\n                ...state,\r\n                visited: [],\r\n                pathList: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import default style\r\nimport 'rsuite/dist/styles/rsuite-default.css'\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport arrayReducer from './store/reducers/sortAlgos'\r\nimport pathReducer from './store/reducers/pathAlgos'\r\n\r\nconst reducer = combineReducers({\r\n  array: arrayReducer,\r\n  pathFinders: pathReducer \r\n})\r\n\r\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\n\r\nconst store = createStore(reducer,  composeEnhancers(applyMiddleware(thunk)))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}