{"version":3,"sources":["store/actions/sortAlgos.ts","store/actions/actionTypes.ts","components/CustomSlider.tsx","containers/sorting-visualizers/mainApp.tsx","App.tsx","serviceWorker.ts","store/reducers/sortAlgos.ts","index.tsx"],"names":["setRunning","param","type","insertionSort","payload","mergeSort","mergeSortArray","arr","speed","dispatch","params","mergeSortArr","l","r","mid","Math","floor","push","m","l1","val","idx","merge","length","dispatchAction","shift","setTimeout","quickSort","CustomSlider","props","style","Slider","value","min","step","max","graduated","progress","onChange","v","onValChange","tooltip","connect","state","array","swappers","sorted","running","newArray","size","bubbleSortArray","i","j","temp","selectionSortArray","minidx","insertionSortArray","currentVal","quickSortArray","pivot","start","end","swap","idx1","idx2","swapIdx","quickSortArr","left","right","pivotIndex","heapSortArray","arrLength","maxHeap","input","indexA","indexB","heapSortArr","calcSpeed","arrSize","useState","setArrSize","setSpeed","useEffect","Navbar","className","color","onClick","width","marginRight","ArrayBody","display","flexDirection","justifyContent","map","ele","backgroundColor","includes","height","key","App","path","component","SortingVisualizers","Boolean","window","location","hostname","match","initialState","reducer","action","random","indexOf","Array","from","keys","combineReducers","arrayReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.172409f0.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes'\r\n\r\nexport const newArray: (size: number) => Object = size => {\r\n    return {\r\n        type: actionTypes.GENERATE_NEW_ARRAY,\r\n        payload: {\r\n            size: size\r\n        }\r\n    }\r\n}\r\n\r\nexport const setRunning: (param: boolean) => Object = (param) => {\r\n    if(param){\r\n        return {\r\n            type: actionTypes.SET_RUNNING_TRUE\r\n        }\r\n    }\r\n    return {\r\n        type: actionTypes.SET_RUNNING_FALSE\r\n    }\r\n}\r\n\r\nexport const bubbleSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.BUBBLE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const bubbleSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(bubbleSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr.length - i - 1; j++) {\r\n                params.push([j, j + 1])\r\n                if (arr[j] > arr[j + 1]) {\r\n                    params.push([j, j + 1, 'swap'])\r\n                    let temp = arr[j + 1]\r\n                    arr[j + 1] = arr[j]\r\n                    arr[j] = temp\r\n\r\n                    params.push([...arr])\r\n                    params.push([])\r\n                }\r\n                else {\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n            params.push(arr.length - i - 1)\r\n        }\r\n        // console.log(params)\r\n        dispatchAction(params)\r\n\r\n    }\r\n}\r\n\r\nexport const selectionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.SELECTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const selectionSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(selectionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let minidx = i\r\n            let min = arr[minidx]\r\n            for (let j = i + 1; j < arr.length; j++) {\r\n                params.push([minidx, j])\r\n                if (min > arr[j]) {\r\n                    min = arr[j]\r\n                    minidx = j\r\n                }\r\n            }\r\n            arr[minidx] = arr[i]\r\n            arr[i] = min\r\n\r\n            params.push([minidx, i, 'swap'])\r\n            params.push([...arr])\r\n            params.push(i)\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const insertionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.INSERTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const insertionSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(insertionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(insertionSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        let currentVal;\r\n        for (let i = 1; i < arr.length; i++) {\r\n            currentVal = arr[i];\r\n            let j = i - 1\r\n            for (; j >= 0 && arr[j] > currentVal; j--) {\r\n                params.push([j + 1, j + 1])\r\n                arr[j + 1] = arr[j]\r\n\r\n                params.push([...arr])\r\n            }\r\n            params.push([j + 1, j + 1, 'insert'])\r\n            arr[j + 1] = currentVal;\r\n            params.push([...arr])\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const mergeSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.MERGE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const mergeSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(mergeSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(mergeSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // merge sort logic\r\n        const merge = (arr: number[], l: number, m: number, r: number) => {\r\n            let l1 = m + 1;\r\n            while (l <= m && l1 <= r) {\r\n                params.push([l, l1])\r\n                if (arr[l] <= arr[l1]) l++; // proper positions in the subarray\r\n                else {                      // shift the values and insert at correct place\r\n                    let val = arr[l1];\r\n                    let idx = l1;\r\n                    while (idx !== l) {\r\n                        arr[idx] = arr[idx - 1];\r\n                        idx--;\r\n                    }\r\n                    params.push([l, l1, 'swap'])\r\n                    arr[l] = val;\r\n                    l++;\r\n                    m++;\r\n                    l1++;\r\n                }\r\n                params.push([...arr])\r\n            }\r\n        }\r\n\r\n        const mergeSortArr = (arr: number[], l: number, r: number) => {\r\n            if (l < r) {\r\n                let mid = Math.floor((l + r) / 2);\r\n                mergeSortArr(arr, l, mid);\r\n                params.push([...arr])\r\n                mergeSortArr(arr, mid + 1, r);\r\n                params.push([...arr])\r\n                merge(arr, l, mid, r);\r\n            }\r\n        }\r\n        mergeSortArr(arr, 0, arr.length - 1)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const quickSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.QUICK_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const quickSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(quickSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(quickSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // quick sort logic\r\n        const pivot = (arr: number[], start = 0, end = arr.length - 1) => {\r\n            const swap = (arr: number[], idx1: number, idx2: number) => {\r\n                [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n            };\r\n\r\n            // We are assuming the pivot is always the first element\r\n            let pivot = arr[start];\r\n            let swapIdx = start;\r\n\r\n            for (let i = start + 1; i <= end; i++) {\r\n                if (pivot > arr[i]) {\r\n                    swapIdx++;\r\n                    swap(arr, swapIdx, i);\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n\r\n            // Swap the pivot from the start the swapPoint\r\n            swap(arr, start, swapIdx);\r\n            params.push([...arr])\r\n            return swapIdx;\r\n        }\r\n\r\n\r\n        const quickSortArr = (arr: number[], left = 0, right = arr.length - 1) => {\r\n            if (left < right) {\r\n                let pivotIndex = pivot(arr, left, right)\r\n                //left\r\n                quickSortArr(arr, left, pivotIndex - 1);\r\n                //right\r\n                quickSortArr(arr, pivotIndex + 1, right);\r\n            }\r\n        }\r\n        quickSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const heapSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.HEAP_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const heapSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(heapSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // heap sort logic\r\n        let arrLength: number\r\n        const maxHeap = (input: number[], i: number) => {\r\n            const left = 2 * i + 1\r\n            const right = 2 * i + 2\r\n            let max = i\r\n        \r\n            if (left < arrLength && input[left] > input[max]) {\r\n                max = left\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (right < arrLength && input[right] > input[max])     {\r\n                max = right\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (max !== i) {\r\n                params.push([max, i])\r\n                swap(input, i, max)\r\n                maxHeap(input, max)\r\n            }\r\n        }\r\n        \r\n        const swap = (input: number[], indexA: number, indexB: number) => {\r\n            params.push([indexA, indexB, 'swap'])\r\n            const temp = input[indexA]\r\n        \r\n            input[indexA] = input[indexB]\r\n            input[indexB] = temp\r\n\r\n            params.push([...input])\r\n        }\r\n        \r\n        const heapSortArr = (input: number[]) => {   \r\n            arrLength = input.length\r\n        \r\n            for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1)      {\r\n                maxHeap(input, i)\r\n              }\r\n        \r\n            for (let i = input.length - 1; i >= 0; i--) {\r\n                swap(input, 0, i)\r\n                arrLength--\r\n                params.push(i)\r\n                maxHeap(input, 0)\r\n            }\r\n            params.push([...arr])\r\n        }\r\n\r\n        heapSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}","export const GENERATE_NEW_ARRAY = 'GENERATE_NEW_ARRAY';\r\nexport const SET_RUNNING_TRUE = 'SET_RUNNING_TRUE';\r\nexport const SET_RUNNING_FALSE = 'SET_RUNNING_FALSE';\r\n\r\nexport const BUBBLE_SORT= 'BUBBLE_SORT'\r\nexport const SELECTION_SORT= 'SELECTION_SORT'\r\nexport const INSERTION_SORT= 'INSERTION_SORT'\r\nexport const MERGE_SORT= 'MERGE_SORT'\r\nexport const QUICK_SORT= 'QUICK_SORT'\r\nexport const HEAP_SORT= 'HEAP_SORT'","import React from 'react'\r\nimport { Slider } from 'rsuite'\r\n\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\n\r\nconst CustomSlider = (props: any) => {\r\n  return (\r\n    <div style={{...props.style}}>\r\n      <Slider\r\n        value={props.val}\r\n        min={props.min}\r\n        step={props.step}\r\n        max={props.max}\r\n        graduated\r\n        progress\r\n        onChange={v => props.onValChange(v)}\r\n        tooltip={props.tooltip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomSlider","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    newArray,\r\n    bubbleSortArray,\r\n    selectionSortArray,\r\n    insertionSortArray,\r\n    mergeSortArray,\r\n    quickSortArray,\r\n    heapSortArray\r\n} from '../../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport './mainApp.css'\r\n\r\nimport CustomSlider from '../../components/CustomSlider'\r\n\r\nconst MainApp: React.FC = (props: any) => {\r\n    const calcSpeed = (arrSize: number) => {\r\n        if(arrSize > 60){\r\n            return Math.floor(110/arrSize);\r\n        }\r\n        return Math.floor((110/arrSize)*10);\r\n    }\r\n\r\n    const [arrSize, setArrSize] = useState(65);\r\n    const [speed, setSpeed] = useState(calcSpeed(arrSize));\r\n\r\n    const { newArray } = props;\r\n    useEffect(() => newArray(60), [newArray]);\r\n\r\n    const handleArrSize = (size: number) => {\r\n        if(!props.running){\r\n            setArrSize(size)\r\n            if (size !== arrSize){\r\n                props.newArray(size)\r\n                setSpeed(calcSpeed(size))\r\n            }\r\n        }\r\n    }\r\n\r\n    const Navbar = (\r\n        <div className='nav-bar'>\r\n            <div className='nav-bar-left'>\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if (!props.running) props.newArray(arrSize)\r\n                    }}  \r\n                >Generate New Array</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.bubbleSortArray(props.arr, speed)\r\n                        }\r\n                }}>Bubble Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.insertionSortArray(props.arr, speed)\r\n                        }\r\n                }}>Insertion Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.selectionSortArray(props.arr, speed)\r\n                        }\r\n                }}>Selection Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.mergeSortArray(props.arr, speed)\r\n                        }\r\n                }}>Merge Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.quickSortArray(props.arr, speed)\r\n                        }\r\n                }}>Quick Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.heapSortArray(props.arr, speed)\r\n                        }\r\n                }}>Heap Sort</div>\r\n            </div>\r\n            <div className='nav-bar-right'>\r\n                <div className='size-element'>\r\n                    Size :\r\n                    </div>\r\n                <div className='size-element'>\r\n                    {arrSize}\r\n                </div>\r\n                <div className='slider'>\r\n                    <CustomSlider\r\n                        style={{\r\n                            width: 200,\r\n                            marginRight: 50\r\n                        }}\r\n                        val={arrSize}\r\n                        min={5}\r\n                        max={110}\r\n                        step={15}\r\n                        onValChange={handleArrSize}\r\n                        tooltip={false}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const ArrayBody = (\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\r\n            {props.arr.map((ele: number, idx: number) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: props.sorted.includes(idx) ? '#60FF60' :\r\n                                props.swappers.includes(idx) ? (props.swappers.length === 3 ? 'purple' : 'red') :\r\n                                    '#ffeeff',\r\n                            width: '50px',\r\n                            height: `${ele}px`\r\n                        }} key={idx}\r\n                    >\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className='main-app'>\r\n            {Navbar}\r\n            {ArrayBody}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        arr: state.array.arr,\r\n        swappers: state.array.swappers,\r\n        sorted: state.array.sorted,\r\n        running: state.array.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        newArray: (size: number) => dispatch(newArray(size)),\r\n        bubbleSortArray: (arr: number[], speed: number) => dispatch(bubbleSortArray(arr, speed)),\r\n        selectionSortArray: (arr: number[], speed: number) => dispatch(selectionSortArray(arr, speed)),\r\n        insertionSortArray: (arr: number[], speed: number) => dispatch(insertionSortArray(arr, speed)),\r\n        mergeSortArray: (arr: number[], speed: number) => dispatch(mergeSortArray(arr, speed)),\r\n        quickSortArray: (arr: number[], speed: number) => dispatch(quickSortArray(arr, speed)),\r\n        heapSortArray: (arr: number[], speed: number) => dispatch(heapSortArray(arr, speed))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainApp)","import React from 'react';\r\nimport './App.css';\r\nimport SortingVisualizers from './containers/sorting-visualizers/mainApp'\r\n\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/sorting-visualizers\" component={SortingVisualizers} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\r\n\r\nlet initialState: {\r\n    arr: number[],\r\n    swappers: number[],\r\n    sorted: number[],\r\n    running: boolean\r\n} = {\r\n    arr: [],\r\n    swappers: [],\r\n    sorted: [],\r\n    running: false\r\n}\r\n\r\nconst reducer = (state = initialState, action: { type: string, payload: any }) => {\r\n    let arr = [];\r\n    switch (action.type) {\r\n        case actionTypes.GENERATE_NEW_ARRAY:\r\n            while (arr.length < action.payload.size) {\r\n                let r = Math.floor(Math.random() * 500) + 1;\r\n                if (arr.indexOf(r) === -1) arr.push(r);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                arr,\r\n                swappers: [],\r\n                sorted: []\r\n            }\r\n\r\n        case actionTypes.SET_RUNNING_TRUE:\r\n            return {\r\n                ...state,\r\n                running: true\r\n            }\r\n        \r\n        case actionTypes.SET_RUNNING_FALSE:\r\n            return {\r\n                ...state,\r\n                running: false\r\n            }\r\n\r\n        case actionTypes.BUBBLE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload]\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    swappers: action.payload\r\n                }\r\n            }\r\n\r\n        case actionTypes.SELECTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.INSERTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.MERGE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.QUICK_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.HEAP_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport arrayReducer from './store/reducers/sortAlgos'\r\n\r\nconst reducer = combineReducers({\r\n  array: arrayReducer\r\n})\r\n\r\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\n\r\nconst store = createStore(reducer,  composeEnhancers(applyMiddleware(thunk)))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}