{"version":3,"sources":["store/actions/sortAlgos.ts","store/actions/actionTypes.ts","containers/mainApp.tsx","App.tsx","serviceWorker.ts","store/reducers/sortAlgos.ts","index.tsx"],"names":["insertionSort","param","type","payload","mergeSort","mergeSortArray","arr","dispatch","params","mergeSortArr","l","r","mid","Math","floor","push","m","l1","val","idx","merge","length","dispatchAction","shift","setTimeout","console","log","quickSort","connect","state","array","swappers","sorted","newArray","size","bubbleSortArray","i","j","temp","selectionSortArray","minidx","min","insertionSortArray","currentVal","quickSortArray","pivot","start","end","swap","idx1","idx2","swapIdx","quickSortArr","left","right","pivotIndex","heapSortArray","arrLength","maxHeap","input","max","indexA","indexB","heapSortArr","props","useState","running","setRunning","useEffect","className","onClick","style","display","flexDirection","justifyContent","map","ele","backgroundColor","includes","width","height","key","App","Boolean","window","location","hostname","match","initialState","reducer","action","random","indexOf","Array","from","keys","combineReducers","arrayReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.220a13ea.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes'\r\n\r\nexport const newArray: (size: number) => Object = size => {\r\n    return {\r\n        type: actionTypes.GENERATE_NEW_ARRAY,\r\n        payload: {\r\n            size: size\r\n        }\r\n    }\r\n}\r\n\r\nexport const bubbleSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.BUBBLE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const bubbleSortArray: (arr: number[]) => any = (arr) => {\r\n    return (dispatch: any) => {\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(bubbleSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), 1)\r\n            }\r\n            else {\r\n                console.log(\"DONE\")\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr.length - i - 1; j++) {\r\n                params.push([j, j + 1])\r\n                if (arr[j] > arr[j + 1]) {\r\n                    params.push([])\r\n                    params.push([j, j + 1, 'swap'])\r\n                    let temp = arr[j + 1]\r\n                    arr[j + 1] = arr[j]\r\n                    arr[j] = temp\r\n\r\n                    params.push([...arr])\r\n                    params.push([])\r\n                }\r\n                else {\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n            params.push(arr.length - i - 1)\r\n        }\r\n        // console.log(params)\r\n        dispatchAction(params)\r\n\r\n    }\r\n}\r\n\r\nexport const selectionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.SELECTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const selectionSortArray: (arr: number[]) => any = (arr) => {\r\n    return (dispatch: any) => {\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(selectionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), 20)\r\n            }\r\n            else {\r\n                console.log(\"DONE\")\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let minidx = i\r\n            let min = arr[minidx]\r\n            for (let j = i + 1; j < arr.length; j++) {\r\n                params.push([minidx, j])\r\n                if (min > arr[j]) {\r\n                    min = arr[j]\r\n                    minidx = j\r\n                }\r\n            }\r\n            arr[minidx] = arr[i]\r\n            arr[i] = min\r\n\r\n            params.push([minidx, i, 'swap'])\r\n            params.push([...arr])\r\n            params.push(i)\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const insertionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.INSERTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const insertionSortArray: (arr: number[]) => any = (arr) => {\r\n    return (dispatch: any) => {\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(insertionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), 30)\r\n            }\r\n            else {\r\n                dispatch(insertionSort(arr.length))\r\n                console.log(\"DONE\")\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        let currentVal;\r\n        for (let i = 1; i < arr.length; i++) {\r\n            currentVal = arr[i];\r\n            let j = i - 1\r\n            for (; j >= 0 && arr[j] > currentVal; j--) {\r\n                params.push([j + 1, j + 1])\r\n                arr[j + 1] = arr[j]\r\n\r\n                params.push([...arr])\r\n            }\r\n            params.push([j + 1, j + 1, 'insert'])\r\n            arr[j + 1] = currentVal;\r\n            params.push([...arr])\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const mergeSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.MERGE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const mergeSortArray: (arr: number[]) => any = (arr) => {\r\n    return (dispatch: any) => {\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(mergeSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), 30)\r\n            }\r\n            else {\r\n                dispatch(mergeSort(arr.length))\r\n                console.log(\"DONE\")\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // merge sort logic\r\n        const merge = (arr: number[], l: number, m: number, r: number) => {\r\n            let l1 = m + 1;\r\n            while (l <= m && l1 <= r) {\r\n                params.push([l, l1])\r\n                if (arr[l] <= arr[l1]) l++; // proper positions in the subarray\r\n                else {                      // shift the values and insert at correct place\r\n                    let val = arr[l1];\r\n                    let idx = l1;\r\n                    while (idx !== l) {\r\n                        arr[idx] = arr[idx - 1];\r\n                        idx--;\r\n                    }\r\n                    params.push([l, l1, 'swap'])\r\n                    arr[l] = val;\r\n                    l++;\r\n                    m++;\r\n                    l1++;\r\n                }\r\n                params.push([...arr])\r\n            }\r\n        }\r\n\r\n        const mergeSortArr = (arr: number[], l: number, r: number) => {\r\n            if (l < r) {\r\n                let mid = Math.floor((l + r) / 2);\r\n                mergeSortArr(arr, l, mid);\r\n                params.push([...arr])\r\n                mergeSortArr(arr, mid + 1, r);\r\n                params.push([...arr])\r\n                merge(arr, l, mid, r);\r\n            }\r\n        }\r\n        mergeSortArr(arr, 0, arr.length - 1)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const quickSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.QUICK_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const quickSortArray: (arr: number[]) => any = (arr) => {\r\n    return (dispatch: any) => {\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(quickSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), 30)\r\n            }\r\n            else {\r\n                dispatch(quickSort(arr.length))\r\n                console.log(\"DONE\")\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // quick sort logic\r\n        const pivot = (arr: number[], start = 0, end = arr.length - 1) => {\r\n            const swap = (arr: number[], idx1: number, idx2: number) => {\r\n                [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n            };\r\n\r\n            // We are assuming the pivot is always the first element\r\n            let pivot = arr[start];\r\n            let swapIdx = start;\r\n\r\n            for (let i = start + 1; i <= end; i++) {\r\n                if (pivot > arr[i]) {\r\n                    swapIdx++;\r\n                    swap(arr, swapIdx, i);\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n\r\n            // Swap the pivot from the start the swapPoint\r\n            swap(arr, start, swapIdx);\r\n            params.push([...arr])\r\n            return swapIdx;\r\n        }\r\n\r\n\r\n        const quickSortArr = (arr: number[], left = 0, right = arr.length - 1) => {\r\n            if (left < right) {\r\n                let pivotIndex = pivot(arr, left, right)\r\n                //left\r\n                quickSortArr(arr, left, pivotIndex - 1);\r\n                //right\r\n                quickSortArr(arr, pivotIndex + 1, right);\r\n            }\r\n        }\r\n        quickSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const heapSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.HEAP_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const heapSortArray: (arr: number[]) => any = (arr) => {\r\n    return (dispatch: any) => {\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(heapSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), 15)\r\n            }\r\n            else {\r\n                console.log(\"DONE\")\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // heap sort logic\r\n        let arrLength: number\r\n        const maxHeap = (input: number[], i: number) => {\r\n            const left = 2 * i + 1\r\n            const right = 2 * i + 2\r\n            let max = i\r\n        \r\n            if (left < arrLength && input[left] > input[max]) {\r\n                max = left\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (right < arrLength && input[right] > input[max])     {\r\n                max = right\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (max !== i) {\r\n                params.push([max, i])\r\n                swap(input, i, max)\r\n                maxHeap(input, max)\r\n            }\r\n        }\r\n        \r\n        const swap = (input: number[], indexA: number, indexB: number) => {\r\n            params.push([indexA, indexB, 'swap'])\r\n            const temp = input[indexA]\r\n        \r\n            input[indexA] = input[indexB]\r\n            input[indexB] = temp\r\n\r\n            params.push([...input])\r\n        }\r\n        \r\n        const heapSortArr = (input: number[]) => {   \r\n            arrLength = input.length\r\n        \r\n            for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1)      {\r\n                maxHeap(input, i)\r\n              }\r\n        \r\n            for (let i = input.length - 1; i >= 0; i--) {\r\n                swap(input, 0, i)\r\n                arrLength--\r\n                params.push(i)\r\n                maxHeap(input, 0)\r\n            }\r\n            params.push([...arr])\r\n        }\r\n\r\n        heapSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}","export const GENERATE_NEW_ARRAY = 'GENERATE_NEW_ARRAY';\r\n\r\nexport const BUBBLE_SORT= 'BUBBLE_SORT'\r\nexport const SELECTION_SORT= 'SELECTION_SORT'\r\nexport const INSERTION_SORT= 'INSERTION_SORT'\r\nexport const MERGE_SORT= 'MERGE_SORT'\r\nexport const QUICK_SORT= 'QUICK_SORT'\r\nexport const HEAP_SORT= 'HEAP_SORT'","import React, { useState, useEffect } from 'react'\r\nimport { newArray, \r\n    bubbleSortArray, \r\n    selectionSortArray, \r\n    insertionSortArray, \r\n    mergeSortArray,\r\n    quickSortArray,\r\n    heapSortArray\r\n } from '../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport './mainApp.css'\r\n\r\n\r\nconst MainApp: React.FC = (props: any) => { \r\n    const [running, setRunning] = useState(false) \r\n\r\n    useEffect(() => props.newArray(60), [])\r\n\r\n    return (\r\n        <div className='main-app'>\r\n            <div className='nav-bar'>\r\n                <div className='nav-bar-left'>\r\n                    <div className='nav-element' onClick={() => {\r\n                        if(!running) props.newArray(60)\r\n                    }}\r\n                    >Generate New Array</div>\r\n\r\n                    <div className='nav-element' onClick={() => {\r\n                        setRunning(true)\r\n                        props.bubbleSortArray(props.arr)}}>Bubble Sort</div>\r\n\r\n                    <div className='nav-element' onClick={() => {\r\n                        setRunning(true)\r\n                        props.insertionSortArray(props.arr)}}>Insertion Sort</div>\r\n\r\n                    <div className='nav-element' onClick={() => {\r\n                        setRunning(true)\r\n                        props.selectionSortArray(props.arr)}}>Selection Sort</div>\r\n\r\n                    <div className='nav-element' onClick={() => {\r\n                        setRunning(true)\r\n                        props.mergeSortArray(props.arr)}}>Merge Sort</div>\r\n\r\n                    <div className='nav-element' onClick={() => {\r\n                        setRunning(true)\r\n                        props.quickSortArray(props.arr)}}>Quick Sort</div>\r\n\r\n                    <div className='nav-element' onClick={() => {\r\n                        setRunning(true)\r\n                        props.heapSortArray(props.arr)}}>Heap Sort</div>\r\n                </div>\r\n                <div>\r\n                    \r\n                </div>\r\n            </div>\r\n            <div style={{display:'flex', flexDirection: 'row', justifyContent:'center'}}>\r\n                {props.arr.map((ele: number, idx: number) => {\r\n                    return(\r\n                        <div \r\n                            style={{\r\n                                backgroundColor: props.sorted.includes(idx)? '\t#60FF60': \r\n                                                 props.swappers.includes(idx)? (props.swappers.length===3? 'purple' : 'red'):\r\n                                                 '#ffeeff',\r\n                                width: '50px', \r\n                                height: `${ele}px`\r\n                            }} key={idx}\r\n                        >\r\n                        </div>\r\n                    ) \r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        arr: state.array.arr,\r\n        swappers: state.array.swappers,\r\n        sorted: state.array.sorted\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        newArray: (size: number) => dispatch(newArray(size)),\r\n        bubbleSortArray: (arr: number[]) => dispatch(bubbleSortArray(arr)),\r\n        selectionSortArray: (arr: number[]) => dispatch(selectionSortArray(arr)),\r\n        insertionSortArray: (arr: number[]) => dispatch(insertionSortArray(arr)),\r\n        mergeSortArray: (arr: number[]) => dispatch(mergeSortArray(arr)),\r\n        quickSortArray: (arr: number[]) => dispatch(quickSortArray(arr)),\r\n        heapSortArray: (arr: number[]) => dispatch(heapSortArray(arr))\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainApp)","import React from 'react';\nimport './App.css';\nimport MainApp from './containers/mainApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\r\n\r\nlet initialState: {\r\n    arr: number[],\r\n    swappers: number[],\r\n    sorted: number[]\r\n} = {\r\n    arr: [],\r\n    swappers: [],\r\n    sorted: []\r\n}\r\n\r\nconst reducer = (state = initialState, action: { type: string, payload: any }) => {\r\n    let arr = [];\r\n    switch (action.type) {\r\n        case actionTypes.GENERATE_NEW_ARRAY:\r\n            while (arr.length < action.payload.size) {\r\n                let r = Math.floor(Math.random() * 500) + 1;\r\n                if (arr.indexOf(r) === -1) arr.push(r);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                arr,\r\n                swappers: [],\r\n                sorted: []\r\n            }\r\n        case actionTypes.BUBBLE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload]\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    swappers: action.payload\r\n                }\r\n            }\r\n\r\n        case actionTypes.SELECTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.INSERTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.MERGE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.QUICK_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.HEAP_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport arrayReducer from './store/reducers/sortAlgos'\n\nconst reducer = combineReducers({\n  array: arrayReducer\n})\n\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\n\nconst store = createStore(reducer,  composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}