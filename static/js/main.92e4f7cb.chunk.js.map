{"version":3,"sources":["store/actions/sortAlgos.ts","store/actions/actionTypes.ts","store/actions/path-finders/graphBFS.ts","store/actions/path-finders/graphDFS.ts","store/actions/path-finders/dijkstras.ts","store/actions/path-finders/mazeGen.ts","store/actions/pathAlgos.ts","components/custom/CustomSlider.tsx","containers/sorting-visualizers/MainApp.tsx","containers/path-finders/MainApp.tsx","components/main-page/navbar/Navbar.tsx","components/main-page/MainPage.tsx","components/UnderConstruction.tsx","App.tsx","serviceWorker.ts","store/reducers/sortAlgos.ts","store/reducers/pathAlgos.ts","index.tsx"],"names":["setRunning","param","type","insertionSort","payload","mergeSort","mergeSortArray","arr","speed","dispatch","params","mergeSortArr","l","r","mid","Math","floor","push","m","l1","val","idx","merge","length","dispatchAction","shift","setTimeout","quickSort","breadthFirstSearch","adjList","excludeList","start","finish","visited","allVisitedNodes","path","relations","queue","bfs","vertex","forEach","node","includes","curVertex","reverse","depthFirstSearch","end","dfs","nextList","res","concat","PriorityQueue","values","this","priority","sort","a","b","Dijkstra","smallest","nodes","distances","previous","enqueue","Infinity","dequeue","neighbor","nextNode","candidate","nextNeighbor","getNeighbour","currentCell","row","col","ignore","neighbours","random","mazeGen","blocks","list","i","stack","next","maze","j","animate","CustomSlider","props","style","Slider","value","min","step","max","graduated","progress","onChange","v","onValChange","tooltip","withRouter","connect","state","array","swappers","sorted","running","newArray","size","bubbleSortArray","temp","selectionSortArray","minidx","insertionSortArray","currentVal","quickSortArray","pivot","swap","idx1","idx2","swapIdx","quickSortArr","left","right","pivotIndex","heapSortArray","arrLength","maxHeap","input","indexA","indexB","heapSortArr","calcSpeed","arrSize","useState","setArrSize","setSpeed","useEffect","Navbar","className","color","onClick","history","width","marginRight","ArrayBody","display","flexDirection","justifyContent","map","ele","backgroundColor","height","key","pathFinders","adjacencyList","pathList","visitedList","mazeBlocks","addVertex","addEdge","vertex1","vertex2","reset","onlyPath","resetWallPath","mazeGenerator","BFSGraphSearch","blockedIds","startVertex","endVertex","BFS","DFSGraphSearch","DFS","DijkstraGraphSearch","Dijstra","setStart","setFinish","dragWall","setDragWall","dragStart","setDragStart","dragFinish","setDragFinish","setRunnng","getBlockedIds","blockedVertices","document","getElementsByClassName","id","resetBoard","walls","querySelectorAll","call","el","classList","remove","elems","visiteds","ends","softReset","gridId","interval","setInterval","getElementById","add","clearInterval","animatePath","handleMouseDown","e","target","toggle","handleMouseEnter","lastStart","lastFinish","grid","elements","classes","gridRow","gridCol","onMouseDown","onMouseUp","parseInt","onMouseEnter","fontSize","UnderConstruction","App","exact","component","SortingVisualizers","PathFinders","MainPage","Boolean","window","location","hostname","match","initialState","reducer","action","indexOf","Array","from","keys","combineReducers","arrayReducer","pathReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92e4f7cb.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes'\r\n\r\nexport const newArray: (size: number) => Object = size => {\r\n    return {\r\n        type: actionTypes.GENERATE_NEW_ARRAY,\r\n        payload: {\r\n            size: size\r\n        }\r\n    }\r\n}\r\n\r\nexport const setRunning: (param: boolean) => Object = (param) => {\r\n    if(param){\r\n        return {\r\n            type: actionTypes.SET_RUNNING_TRUE\r\n        }\r\n    }\r\n    return {\r\n        type: actionTypes.SET_RUNNING_FALSE\r\n    }\r\n}\r\n\r\nexport const bubbleSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.BUBBLE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const bubbleSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(bubbleSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < arr.length - i - 1; j++) {\r\n                params.push([j, j + 1])\r\n                if (arr[j] > arr[j + 1]) {\r\n                    params.push([j, j + 1, 'swap'])\r\n                    let temp = arr[j + 1]\r\n                    arr[j + 1] = arr[j]\r\n                    arr[j] = temp\r\n\r\n                    params.push([...arr])\r\n                    params.push([])\r\n                }\r\n                else {\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n            params.push(arr.length - i - 1)\r\n        }\r\n        // console.log(params)\r\n        dispatchAction(params)\r\n\r\n    }\r\n}\r\n\r\nexport const selectionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.SELECTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const selectionSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(selectionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let minidx = i\r\n            let min = arr[minidx]\r\n            for (let j = i + 1; j < arr.length; j++) {\r\n                params.push([minidx, j])\r\n                if (min > arr[j]) {\r\n                    min = arr[j]\r\n                    minidx = j\r\n                }\r\n            }\r\n            arr[minidx] = arr[i]\r\n            arr[i] = min\r\n\r\n            params.push([minidx, i, 'swap'])\r\n            params.push([...arr])\r\n            params.push(i)\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const insertionSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.INSERTION_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const insertionSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(insertionSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(insertionSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        let currentVal;\r\n        for (let i = 1; i < arr.length; i++) {\r\n            currentVal = arr[i];\r\n            let j = i - 1\r\n            for (; j >= 0 && arr[j] > currentVal; j--) {\r\n                params.push([j + 1, j + 1])\r\n                arr[j + 1] = arr[j]\r\n\r\n                params.push([...arr])\r\n            }\r\n            params.push([j + 1, j + 1, 'insert'])\r\n            arr[j + 1] = currentVal;\r\n            params.push([...arr])\r\n        }\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const mergeSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.MERGE_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const mergeSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(mergeSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(mergeSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // merge sort logic\r\n        const merge = (arr: number[], l: number, m: number, r: number) => {\r\n            let l1 = m + 1;\r\n            while (l <= m && l1 <= r) {\r\n                params.push([l, l1])\r\n                if (arr[l] <= arr[l1]) l++; // proper positions in the subarray\r\n                else {                      // shift the values and insert at correct place\r\n                    let val = arr[l1];\r\n                    let idx = l1;\r\n                    while (idx !== l) {\r\n                        arr[idx] = arr[idx - 1];\r\n                        idx--;\r\n                    }\r\n                    params.push([l, l1, 'swap'])\r\n                    arr[l] = val;\r\n                    l++;\r\n                    m++;\r\n                    l1++;\r\n                }\r\n                params.push([...arr])\r\n            }\r\n        }\r\n\r\n        const mergeSortArr = (arr: number[], l: number, r: number) => {\r\n            if (l < r) {\r\n                let mid = Math.floor((l + r) / 2);\r\n                mergeSortArr(arr, l, mid);\r\n                params.push([...arr])\r\n                mergeSortArr(arr, mid + 1, r);\r\n                params.push([...arr])\r\n                merge(arr, l, mid, r);\r\n            }\r\n        }\r\n        mergeSortArr(arr, 0, arr.length - 1)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const quickSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.QUICK_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const quickSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(quickSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(quickSort(arr.length))\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // quick sort logic\r\n        const pivot = (arr: number[], start = 0, end = arr.length - 1) => {\r\n            const swap = (arr: number[], idx1: number, idx2: number) => {\r\n                [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n            };\r\n\r\n            // We are assuming the pivot is always the first element\r\n            let pivot = arr[start];\r\n            let swapIdx = start;\r\n\r\n            for (let i = start + 1; i <= end; i++) {\r\n                if (pivot > arr[i]) {\r\n                    swapIdx++;\r\n                    swap(arr, swapIdx, i);\r\n                    params.push([...arr])\r\n                }\r\n            }\r\n\r\n            // Swap the pivot from the start the swapPoint\r\n            swap(arr, start, swapIdx);\r\n            params.push([...arr])\r\n            return swapIdx;\r\n        }\r\n\r\n\r\n        const quickSortArr = (arr: number[], left = 0, right = arr.length - 1) => {\r\n            if (left < right) {\r\n                let pivotIndex = pivot(arr, left, right)\r\n                //left\r\n                quickSortArr(arr, left, pivotIndex - 1);\r\n                //right\r\n                quickSortArr(arr, pivotIndex + 1, right);\r\n            }\r\n        }\r\n        quickSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}\r\n\r\nexport const heapSort: (param: any) => Object = (param) => {\r\n    return {\r\n        type: actionTypes.HEAP_SORT,\r\n        payload: param\r\n    }\r\n}\r\n\r\nexport const heapSortArray: (arr: number[], speed: number) => any = (arr, speed) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setRunning(true))\r\n\r\n        const dispatchAction = (params: number[]) => {\r\n            dispatch(heapSort(params.shift()));\r\n\r\n            if (!!params.length) {\r\n                setTimeout(() => dispatchAction(params), speed)\r\n            }\r\n            else {\r\n                dispatch(setRunning(false))\r\n            }\r\n        }\r\n\r\n        let params: any = [[...arr]]\r\n        // heap sort logic\r\n        let arrLength: number\r\n        const maxHeap = (input: number[], i: number) => {\r\n            const left = 2 * i + 1\r\n            const right = 2 * i + 2\r\n            let max = i\r\n        \r\n            if (left < arrLength && input[left] > input[max]) {\r\n                max = left\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (right < arrLength && input[right] > input[max])     {\r\n                max = right\r\n                params.push([max, i])\r\n            }\r\n        \r\n            if (max !== i) {\r\n                params.push([max, i])\r\n                swap(input, i, max)\r\n                maxHeap(input, max)\r\n            }\r\n        }\r\n        \r\n        const swap = (input: number[], indexA: number, indexB: number) => {\r\n            params.push([indexA, indexB, 'swap'])\r\n            const temp = input[indexA]\r\n        \r\n            input[indexA] = input[indexB]\r\n            input[indexB] = temp\r\n\r\n            params.push([...input])\r\n        }\r\n        \r\n        const heapSortArr = (input: number[]) => {   \r\n            arrLength = input.length\r\n        \r\n            for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1)      {\r\n                maxHeap(input, i)\r\n              }\r\n        \r\n            for (let i = input.length - 1; i >= 0; i--) {\r\n                swap(input, 0, i)\r\n                arrLength--\r\n                params.push(i)\r\n                maxHeap(input, 0)\r\n            }\r\n            params.push([...arr])\r\n        }\r\n\r\n        heapSortArr(arr)\r\n\r\n        dispatchAction(params)\r\n    }\r\n}","export const GENERATE_NEW_ARRAY = 'GENERATE_NEW_ARRAY';\r\nexport const SET_RUNNING_TRUE = 'SET_RUNNING_TRUE';\r\nexport const SET_RUNNING_FALSE = 'SET_RUNNING_FALSE';\r\nexport const BUBBLE_SORT= 'BUBBLE_SORT'\r\nexport const SELECTION_SORT= 'SELECTION_SORT'\r\nexport const INSERTION_SORT= 'INSERTION_SORT'\r\nexport const MERGE_SORT= 'MERGE_SORT'\r\nexport const QUICK_SORT= 'QUICK_SORT'\r\nexport const HEAP_SORT= 'HEAP_SORT'\r\n\r\nexport const ADD_VERTEX = 'ADD_VERTEX'\r\nexport const ADD_EDGE = 'ADD_EDGE'\r\nexport const ANIMATE = 'ANIMATE'\r\nexport const MAZE_GEN = 'MAZE_GEN'\r\nexport const CLEAR_WALL_PATH = 'CLEAR_WALL_PATH'\r\nexport const CLEAR_PATH = 'CLEAR_PATH'","const breadthFirstSearch = (adjList: any, excludeList: string[], start: string, finish: string) => {\r\n    let visited: any = {};\r\n    let allVisitedNodes: string[] = []\r\n    let path: string[] = [];\r\n    let relations: any = {};\r\n    let queue = [start];\r\n\r\n    const bfs = (vertex: string | undefined) => {\r\n        if (vertex === finish) {\r\n            allVisitedNodes.push(vertex)\r\n\r\n            let curVertex = vertex\r\n            path.push(curVertex)\r\n            while (relations[curVertex]) {\r\n                curVertex = relations[curVertex]\r\n                path.push(curVertex)\r\n            }\r\n\r\n            return\r\n        }\r\n        if (!vertex) {\r\n            return\r\n        }\r\n\r\n        visited[vertex] = true\r\n        allVisitedNodes.push(vertex)\r\n\r\n        let nextList = adjList[vertex]\r\n        nextList.forEach((node: string) => {\r\n            if (!visited[node] && !queue.includes(node) && !excludeList.includes(node)) {\r\n                relations[node] = vertex\r\n                queue.push(node)\r\n            }\r\n        })\r\n\r\n        bfs(queue.shift())\r\n    }\r\n    bfs(queue.shift())\r\n\r\n    return [allVisitedNodes, path.reverse()]\r\n}\r\n\r\nexport default breadthFirstSearch","const depthFirstSearch = (adjList: any, excludeList: string[], start: string, end: string) => {\r\n    let visited: any = {};\r\n    let allVisitedNodes: string[] = [];\r\n    let path: string[] = [];\r\n    (function dfs(vertex: string) {\r\n        if (vertex === end) {\r\n            allVisitedNodes.push(vertex)\r\n            return vertex\r\n        }\r\n        if (!vertex) {\r\n            return 'done'\r\n        }\r\n\r\n        visited[vertex] = true\r\n        allVisitedNodes.push(vertex)\r\n        let nextList = adjList[vertex]\r\n        let idx = 0\r\n        let isEnd = false\r\n        while (idx < nextList.length && !isEnd) {\r\n            if (!visited[nextList[idx]] && !excludeList.includes(nextList[idx])) {\r\n                let res = dfs(nextList[idx])\r\n                if (res && res !== 'done') {\r\n                    path.push(res)\r\n                    return vertex\r\n                }\r\n            }\r\n            idx++\r\n        }\r\n    })(start)\r\n\r\n    return [allVisitedNodes, path.concat(start).reverse()]\r\n}\r\n\r\nexport default depthFirstSearch","class PriorityQueue {\r\n    values: any[]\r\n    constructor() {\r\n        this.values = [];\r\n    }\r\n    enqueue(val: any, priority: any) {\r\n        this.values.push({ val, priority });\r\n        this.sort();\r\n    };\r\n    dequeue() {\r\n        return this.values.shift();\r\n    };\r\n    sort() {\r\n        this.values.sort((a, b) => a.priority - b.priority);\r\n    };\r\n}\r\n\r\nconst Dijkstra = (adjList: any, excludeList: string[], start: string, finish: string) => {\r\n    const nodes = new PriorityQueue();\r\n    const distances: any = {};\r\n    const previous: any = {};\r\n    let path: string[] = [] //to return at end\r\n    let smallest;\r\n    let allVisitedNodes: any = []\r\n    //build up initial state\r\n    for (let vertex in adjList) {\r\n        if(!excludeList.includes(vertex)){\r\n            if (vertex === start) {\r\n                distances[vertex] = 0;\r\n                nodes.enqueue(vertex, 0);\r\n            } else {\r\n                distances[vertex] = Infinity;\r\n                nodes.enqueue(vertex, Infinity);\r\n            }\r\n            previous[vertex] = null;\r\n        }\r\n    }\r\n    // as long as there is something to visit\r\n    while (nodes.values.length) {\r\n        smallest = nodes.dequeue().val;\r\n        allVisitedNodes.push(smallest)\r\n        if (smallest === finish) {\r\n            //WE ARE DONE\r\n            //BUILD UP PATH TO RETURN AT END\r\n            while (previous[smallest]) {\r\n                path.push(smallest);\r\n                smallest = previous[smallest];\r\n            }\r\n            break;\r\n        }\r\n        if (smallest || distances[smallest] !== Infinity) {\r\n            for (let neighbor in adjList[smallest]) {\r\n                //find neighboring node\r\n                let nextNode = adjList[smallest][neighbor];\r\n                //calculate new distance to neighboring node\r\n                let candidate = distances[smallest] + 1;\r\n                let nextNeighbor = nextNode; \r\n                if (candidate < distances[nextNeighbor]) {\r\n                    //updating new smallest distance to neighbor\r\n                    distances[nextNeighbor] = candidate;\r\n                    //updating previous - How we got to neighbor\r\n                    previous[nextNeighbor] = smallest;\r\n                    //enqueue in priority queue with new priority\r\n                    nodes.enqueue(nextNeighbor, candidate);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [allVisitedNodes, path.concat(smallest).reverse()];\r\n}\r\n\r\nexport default Dijkstra","const getNeighbour = (currentCell: number, visited: Record<number, boolean>, row: number, col: number, ignore: number[]) => {\r\n    let neighbours = []\r\n    \r\n    // check top\r\n    if(currentCell-(2*col)>0 && !visited[currentCell-(2*col)])\r\n        neighbours.push([currentCell-(2*col), 0])\r\n    // check left\r\n    if(!ignore.includes(currentCell-2) && !visited[currentCell-2])\r\n        neighbours.push([currentCell-2, 1])\r\n    //check bottom\r\n    if(currentCell+(2*col)<=(row-1)*col && !visited[currentCell+(2*col)])\r\n        neighbours.push([currentCell+(2*col), 2])\r\n    // check right\r\n    if(!ignore.includes(currentCell+2) && !visited[currentCell+2])\r\n        neighbours.push([currentCell+2, 3])\r\n    \r\n    // randomly return a neighbour\r\n    if(neighbours.length > 0){\r\n        let randomNeighbour = Math.floor(Math.random() * neighbours.length)\r\n        return neighbours[randomNeighbour]\r\n    }\r\n    return undefined\r\n}\r\n\r\nconst maze = ({ row, col }: { row: number; col: number; }) => {\r\n    // console.log(row, col)\r\n    let res: number[] = []\r\n    let ignore: number[] = []\r\n    for(let i=1; i<row*col; i+=col) ignore.push(i)\r\n    for(let i=col; i<=row*col; i+=col) ignore.push(i)\r\n\r\n    let stack: number[] = [] \r\n    let visited: Record<number, boolean> = {}\r\n    let currentCell: number = (col + 1) + 1\r\n    visited[currentCell] = true\r\n    stack.push(currentCell)\r\n\r\n    while(stack.length > 0){\r\n        currentCell = stack.shift() !\r\n        let next = getNeighbour(currentCell, visited, row, col, ignore)\r\n        if(next){\r\n            stack.push(currentCell)\r\n            switch (next[1]){\r\n                case 0:\r\n                    res.push(currentCell, currentCell-col, next[0])\r\n                    break\r\n                case 1:\r\n                    res.push(currentCell, currentCell-1, next[0])\r\n                    break\r\n                case 2:\r\n                    res.push(currentCell, currentCell+col, next[0])\r\n                    break\r\n                case 3:\r\n                    res.push(currentCell, currentCell+1, next[0])\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n            visited[next[0]] = true\r\n            stack.push(next[0])\r\n        }\r\n        else{\r\n            res.push(currentCell)\r\n        }\r\n    }\r\n\r\n    return res\r\n}\r\n\r\nconst mazeGen = (row: number, col: number, start: number, finish: number) => {\r\n    let blocks: number[] = []\r\n\r\n    let list = maze({ row, col})\r\n\r\n    for(let i=0; i<row; i++){\r\n        for(let j=1; j<=col; j++){\r\n            if(!list.includes((i*col) + j) && (i*col)+j !== start && (i*col)+j !== finish)\r\n                blocks.push((i*col) + j)\r\n        }\r\n    }\r\n\r\n    return blocks\r\n}\r\n\r\nexport default mazeGen","import * as actionTypes from './actionTypes'\r\n\r\nimport BFS from './path-finders/graphBFS'\r\nimport DFS from './path-finders/graphDFS'\r\nimport Dijstra from './path-finders/dijkstras'\r\nimport mazeGen from './path-finders/mazeGen'\r\n\r\nexport const addVertex: (vertex: string) => Object = (vertex) => {\r\n    return {\r\n        type: actionTypes.ADD_VERTEX,\r\n        payload: vertex\r\n    }\r\n}\r\n\r\nexport const addEdge: (vertex1: string, vertex2: string) => Object = (vertex1, vertex2) => {\r\n    return {\r\n        type: actionTypes.ADD_EDGE,\r\n        payload: {\r\n            vertex1,\r\n            vertex2\r\n        }\r\n    }\r\n}\r\n\r\nexport const animate: (path: string[], visited: string[]) => Object = (path, visited) => {\r\n    return {\r\n        type: actionTypes.ANIMATE,\r\n        payload: {\r\n            path,\r\n            visited\r\n        }\r\n    }\r\n}\r\n\r\nexport const DijkstraGraphSearch:\r\n    (adjList: any, blockedIds: string[], startVertex: string, endVertex: string) => any\r\n    = (adjList, blockedIds, startVertex, endVertex) => {\r\n        return (dispatch: Function) => {\r\n            let [visited, path] = Dijstra(adjList, blockedIds, startVertex, endVertex)\r\n            dispatch(animate(path, visited))\r\n        }\r\n\r\n    }\r\n\r\nexport const BFSGraphSearch:\r\n    (adjList: any, blockedIds: string[], startVertex: string, endVertex: string) => any\r\n    = (adjList, blockedIds, startVertex, endVertex) => {\r\n        return (dispatch: Function) => {\r\n            let [visited, path] = BFS(adjList, blockedIds, startVertex, endVertex)\r\n            dispatch(animate(path, visited))\r\n        }\r\n\r\n    }\r\n\r\nexport const DFSGraphSearch:\r\n    (adjList: any, blockedIds: string[], startVertex: string, endVertex: string) => any\r\n    = (adjList, blockedIds, startVertex, endVertex) => {\r\n        return (dispatch: Function) => {\r\n            let [visited, path] = DFS(adjList, blockedIds, startVertex, endVertex)\r\n            dispatch(animate(path, visited))\r\n        }\r\n\r\n    }\r\n\r\nexport const mazeGenerator: (row: number, col: number, start: number, end: number) => Object = (row, col, start, end) => {\r\n    return {\r\n        type: actionTypes.MAZE_GEN,\r\n        payload: {\r\n            blocks: mazeGen(row, col, start, end)\r\n        }\r\n    }\r\n}\r\n\r\nexport const resetWallPath: (onlyPath: boolean) => Object = (onlyPath) => {\r\n    if(onlyPath){\r\n        return {\r\n            type: actionTypes.CLEAR_PATH,\r\n            payload: {}\r\n        }\r\n    }\r\n    return {\r\n        type: actionTypes.CLEAR_WALL_PATH,\r\n        payload: {}\r\n    }\r\n}","import React from 'react'\r\nimport { Slider } from 'rsuite'\r\n\r\nconst CustomSlider = (props: any) => {\r\n  return (\r\n    <div style={{...props.style}}>\r\n      <Slider\r\n        value={props.val}\r\n        min={props.min}\r\n        step={props.step}\r\n        max={props.max}\r\n        graduated\r\n        progress\r\n        onChange={v => props.onValChange(v)}\r\n        tooltip={props.tooltip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomSlider","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    newArray,\r\n    bubbleSortArray,\r\n    selectionSortArray,\r\n    insertionSortArray,\r\n    mergeSortArray,\r\n    quickSortArray,\r\n    heapSortArray\r\n} from '../../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './MainApp.css'\r\n\r\nimport CustomSlider from '../../components/custom/CustomSlider'\r\n\r\nconst MainApp: React.FC = (props: any) => {\r\n    const calcSpeed = (arrSize: number) => {\r\n        if(arrSize > 60){\r\n            return Math.floor(110/arrSize);\r\n        }\r\n        return Math.floor((110/arrSize)*10);\r\n    }\r\n\r\n    const [arrSize, setArrSize] = useState(65);\r\n    const [speed, setSpeed] = useState(calcSpeed(arrSize));\r\n\r\n    const { newArray } = props;\r\n\r\n    useEffect(() => {\r\n        newArray(65)\r\n    }, [newArray])\r\n\r\n    const handleArrSize = (size: number) => {\r\n        if(!props.running){\r\n            setArrSize(size)\r\n            if (size !== arrSize){\r\n                props.newArray(size)\r\n                setSpeed(calcSpeed(size))\r\n            }\r\n        }\r\n    }\r\n\r\n    const Navbar = (\r\n        <div className='nav-bar'>\r\n            <div className='nav-bar-left'>\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running)\r\n                            props.history.push('/')\r\n                    }}  \r\n                >DSA PLAYGROUND</div>\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if (!props.running) props.newArray(arrSize)\r\n                    }}  \r\n                >Generate New Array</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.bubbleSortArray(props.arr, speed)\r\n                        }\r\n                }}>Bubble Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.insertionSortArray(props.arr, speed)\r\n                        }\r\n                }}>Insertion Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.selectionSortArray(props.arr, speed)\r\n                        }\r\n                }}>Selection Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.mergeSortArray(props.arr, speed)\r\n                        }\r\n                }}>Merge Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.quickSortArray(props.arr, speed)\r\n                        }\r\n                }}>Quick Sort</div>\r\n\r\n                <div className='nav-element' \r\n                    style={props.running?{color: 'gray'}:{}}\r\n                    onClick={() => {\r\n                        if(!props.running){\r\n                            props.heapSortArray(props.arr, speed)\r\n                        }\r\n                }}>Heap Sort</div>\r\n            </div>\r\n            <div className='nav-bar-right'>\r\n                <div className='size-element'>\r\n                    Size :\r\n                    </div>\r\n                <div className='size-element'>\r\n                    {arrSize}\r\n                </div>\r\n                <div className='slider'>\r\n                    <CustomSlider\r\n                        style={{\r\n                            width: 200,\r\n                            marginRight: 50\r\n                        }}\r\n                        val={arrSize}\r\n                        min={5}\r\n                        max={110}\r\n                        step={15}\r\n                        onValChange={handleArrSize}\r\n                        tooltip={false}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const ArrayBody = (\r\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\r\n            {props.arr.map((ele: number, idx: number) => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: props.sorted.includes(idx) ? '#60FF60' :\r\n                                props.swappers.includes(idx) ? (props.swappers.length === 3 ? 'purple' : 'red') :\r\n                                    '#ffeeff',\r\n                            width: '50px',\r\n                            height: `${ele}px`\r\n                        }} key={idx}\r\n                    >\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className='main-app'>\r\n            {Navbar}\r\n            {ArrayBody}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        arr: state.array.arr,\r\n        swappers: state.array.swappers,\r\n        sorted: state.array.sorted,\r\n        running: state.array.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        newArray: (size: number) => dispatch(newArray(size)),\r\n        bubbleSortArray: (arr: number[], speed: number) => dispatch(bubbleSortArray(arr, speed)),\r\n        selectionSortArray: (arr: number[], speed: number) => dispatch(selectionSortArray(arr, speed)),\r\n        insertionSortArray: (arr: number[], speed: number) => dispatch(insertionSortArray(arr, speed)),\r\n        mergeSortArray: (arr: number[], speed: number) => dispatch(mergeSortArray(arr, speed)),\r\n        quickSortArray: (arr: number[], speed: number) => dispatch(quickSortArray(arr, speed)),\r\n        heapSortArray: (arr: number[], speed: number) => dispatch(heapSortArray(arr, speed))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainApp))","import React, { useState, useEffect } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './MainApp.css'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { addVertex, addEdge, BFSGraphSearch, DFSGraphSearch, DijkstraGraphSearch, mazeGenerator, resetWallPath } from '../../store/actions'\r\n\r\nconst MainApp: React.FC = (props: any) => {\r\n    const gridRow = 31;\r\n    const gridCol = 69;\r\n\r\n    const [start, setStart] = useState(1045)\r\n    const [finish, setFinish] = useState(1095)\r\n\r\n    const [dragWall, setDragWall] = useState(false)\r\n    const [dragStart, setDragStart] = useState(false)\r\n    const [dragFinish, setDragFinish] = useState(false)\r\n\r\n    const [running, setRunnng] = useState(false)\r\n\r\n    const getBlockedIds = () => {\r\n        let blockedIds = []\r\n        let blockedVertices = document.getElementsByClassName('block-wall')\r\n        for (let i = 0; i < blockedVertices.length; i++) {\r\n            blockedIds.push(blockedVertices[i].id)\r\n        }\r\n        return blockedIds\r\n    }\r\n\r\n    const resetBoard = () => {\r\n        props.reset()\r\n        let walls = document.querySelectorAll(\".block-wall\");\r\n        [].forEach.call(walls, function (el: any) {\r\n            el.classList.remove(\"block-wall\");\r\n        });\r\n\r\n        let elems = document.querySelectorAll(\".path-grid\");\r\n        [].forEach.call(elems, function (el: any) {\r\n            el.classList.remove(\"path-grid\");\r\n        });\r\n\r\n        let visiteds = document.querySelectorAll(\".visited-grid\");\r\n        [].forEach.call(visiteds, function (el: any) {\r\n            el.classList.remove(\"visited-grid\");\r\n        });\r\n\r\n        let ends = document.querySelectorAll(\".found-path\");\r\n        [].forEach.call(ends, function (el: any) {\r\n            el.classList.remove(\"found-path\");\r\n        });\r\n    }\r\n\r\n    const softReset = () => {\r\n        props.reset(true)\r\n        let elems = document.querySelectorAll(\".path-grid\");\r\n        [].forEach.call(elems, function (el: any) {\r\n            el.classList.remove(\"path-grid\");\r\n        });\r\n\r\n        let visiteds = document.querySelectorAll(\".visited-grid\");\r\n        [].forEach.call(visiteds, function (el: any) {\r\n            el.classList.remove(\"visited-grid\");\r\n        });\r\n\r\n        let ends = document.querySelectorAll(\".found-path\");\r\n        [].forEach.call(ends, function (el: any) {\r\n            el.classList.remove(\"found-path\");\r\n        });\r\n    }\r\n\r\n    const Navbar = (\r\n        <div className='nav-bar'>\r\n            <div className='nav-bar-left'>\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        if(!running)\r\n                            props.history.push('/')\r\n                    }}\r\n                >DSA PLAYGROUND</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            softReset()\r\n                            props.DijkstraGraphSearch(props.adjList, getBlockedIds(), `${start}`, `${finish}`)\r\n                        }\r\n                    }}>Dijstra's Algorithm</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        \r\n                    }}>Astar Algorithm</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            softReset()\r\n                            props.DFSGraphSearch(props.adjList, getBlockedIds(), `${start}`, `${finish}`)\r\n                        }\r\n                    }}>DFS Algorithm</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            softReset()\r\n                            props.BFSGraphSearch(props.adjList, getBlockedIds(), `${start}`, `${finish}`)\r\n                        }\r\n                    }}>BFS Algorithm</div>\r\n            </div>\r\n            <div className='nav-bar-right'>\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        setRunnng(true)\r\n                        if(!running){\r\n                            resetBoard()\r\n                            props.mazeGenerator(gridRow, gridCol, start, finish)\r\n                        }\r\n                    }}\r\n                >Maze Generator</div>\r\n\r\n                <div className='nav-element' style={running? {color:'gray'}: {}}\r\n                    onClick={() => {\r\n                        if(!running)\r\n                            resetBoard()\r\n                    }}\r\n                >Clear Board</div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const { addEdge, addVertex } = props\r\n    useEffect(() => {\r\n        for (let row = 0; row < gridRow; row++) {\r\n            for (let col = 0; col < gridCol; col++) {\r\n                let gridId = col + 1 + (row * gridCol)\r\n                addVertex(`${gridId}`)\r\n                if (gridId - 1 > 0 && (gridId - 1) % gridCol !== 0) {\r\n                    addEdge(`${gridId}`, `${gridId - 1}`)\r\n                }\r\n                if (gridId - gridCol > 0) {\r\n                    addEdge(`${gridId}`, `${gridId - gridCol}`)\r\n                }\r\n            }\r\n        }\r\n    }, [addEdge, addVertex])\r\n\r\n    const { pathList } = props\r\n    const animatePath = () => {\r\n        let idx = 0\r\n        if(pathList.length > 1){\r\n            const interval = setInterval(() => {\r\n                if (idx !== pathList.length) {\r\n                    document.getElementById(pathList[idx])?.classList.add('path-grid');\r\n                    idx++;\r\n                }\r\n                else {\r\n                    if(visitedList.length > 0){\r\n                        setRunnng(false)\r\n                    }\r\n                    clearInterval(interval)\r\n                    document.getElementById(`${start}`)?.classList.add('found-path')\r\n                    document.getElementById(`${finish}`)?.classList.add('found-path')\r\n                }\r\n            }, 50)\r\n        }\r\n        else if(visitedList.length > 0){\r\n            setRunnng(false)\r\n        }\r\n    }\r\n\r\n    let { visitedList } = props;\r\n    useEffect(() => {\r\n        let idx = 0\r\n        const interval = setInterval(() => {\r\n            // console.log(idx, visitedList[idx])\r\n            if (visitedList.length > 0 && idx !== visitedList.length) {\r\n                document.getElementById(visitedList[idx])?.classList.add('visited-grid');\r\n                idx++;\r\n            }\r\n            else {\r\n                animatePath()\r\n                clearInterval(interval)\r\n            }\r\n        }, 10)\r\n    }, [visitedList])\r\n\r\n    let { mazeBlocks } = props\r\n    useEffect(() => {\r\n        if (mazeBlocks.length > 0) {\r\n            document.getElementById(`${mazeBlocks[0]}`)?.classList.add('block-wall')\r\n            let idx = 1\r\n            const interval = setInterval(() => {\r\n                if (idx !== start && idx !== finish) {\r\n                    document.getElementById(`${mazeBlocks[idx]}`)?.classList.add('block-wall');\r\n                }\r\n                if (idx === mazeBlocks.length) {\r\n                    setRunnng(false)\r\n                    clearInterval(interval)\r\n                }\r\n                idx++;\r\n            }, 5)\r\n        }\r\n    }, [mazeBlocks, finish, start])\r\n\r\n    const handleMouseDown = (e: any, gridId: any) => {\r\n        if (gridId !== start && gridId !== finish) {\r\n            e.target.classList.toggle('block-wall')\r\n            setDragWall(true)\r\n        }\r\n        else {\r\n            if (gridId === start)\r\n                setDragStart(true)\r\n            else\r\n                setDragFinish(true)\r\n        }\r\n    }\r\n\r\n    const handleMouseEnter = (e: any, gridId: any) => {\r\n        if (dragWall && gridId !== start && gridId !== finish) {\r\n            e.target.classList.toggle('block-wall')\r\n        }\r\n        else if (dragStart) {\r\n            let lastStart = document.getElementsByClassName('start-grid-element')[0]\r\n            lastStart.classList.remove('start-grid-element')\r\n            lastStart.classList.remove('fas')\r\n            lastStart.classList.remove('fa-running')\r\n            document.getElementById(e.target.id)?.classList.add('start-grid-element')\r\n            document.getElementById(e.target.id)?.classList.add('fas')\r\n            document.getElementById(e.target.id)?.classList.add('fa-running')\r\n        }\r\n        else if (dragFinish) {\r\n            let lastFinish = document.getElementsByClassName('finish-grid-element')[0]\r\n            lastFinish.classList.remove('finish-grid-element')\r\n            lastFinish.classList.remove('fas')\r\n            lastFinish.classList.remove('fa-home')\r\n            document.getElementById(e.target.id)?.classList.add('finish-grid-element')\r\n            document.getElementById(e.target.id)?.classList.add('fas')\r\n            document.getElementById(e.target.id)?.classList.add('fa-home')\r\n        }\r\n    }\r\n\r\n    let grid: any[] = []\r\n    for (let row = 0; row < gridRow; row++) {\r\n        let elements = []\r\n        for (let col = 0; col < gridCol; col++) {\r\n            let gridId = col + 1 + (row * gridCol)\r\n\r\n            let classes = 'grid-element'\r\n            if (row === gridRow - 1) {\r\n                classes += ' border-bottom'\r\n            }\r\n            if (col === gridCol - 1) {\r\n                classes += ' border-right'\r\n            }\r\n            if (gridId === start) {\r\n                classes += ' start-grid-element fas fa-running'\r\n            }\r\n            if (gridId === finish) {\r\n                classes += ' finish-grid-element fas fa-home'\r\n            }\r\n\r\n            elements.push(\r\n                <div\r\n                    key={col}\r\n                    className={classes}\r\n                    id={`${gridId}`}\r\n\r\n                    onMouseDown={(e: any) => {\r\n                        if(!running)\r\n                            handleMouseDown(e, gridId)\r\n                    }}\r\n                    onMouseUp={() => {\r\n                        if(!running){\r\n                            setDragWall(false)\r\n                            setDragFinish(false)\r\n                            setDragStart(false)\r\n                            setStart(parseInt(document.getElementsByClassName('start-grid-element')[0].id))\r\n                            setFinish(parseInt(document.getElementsByClassName('finish-grid-element')[0].id))\r\n                        }\r\n                    }}\r\n                    onMouseEnter={(e: any) => {\r\n                        if(!running)\r\n                            handleMouseEnter(e, gridId)\r\n                    }}\r\n                >\r\n                </div>\r\n            )\r\n        }\r\n        grid.push(\r\n            <div key={row} className='grid-row'>\r\n                {elements}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {Navbar}\r\n            <div className='grid-main'>\r\n                {grid}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        adjList: state.pathFinders.adjacencyList,\r\n        pathList: state.pathFinders.pathList,\r\n        visitedList: state.pathFinders.visited,\r\n        mazeBlocks: state.pathFinders.mazeBlocks\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addVertex: (vertex: string) => dispatch(addVertex(vertex)),\r\n        addEdge: (vertex1: string, vertex2: string) => dispatch(addEdge(vertex1, vertex2)),\r\n        reset: (onlyPath: boolean) => dispatch(resetWallPath(onlyPath)),\r\n        mazeGenerator: (row: number, col: number, start: number, finish: number) => dispatch(mazeGenerator(row, col, start, finish)),\r\n        BFSGraphSearch: (adjList: Object, blockedIds: string[], startVertex: string, endVertex: string) => dispatch(BFSGraphSearch(adjList, blockedIds, startVertex, endVertex)),\r\n        DFSGraphSearch: (adjList: Object, blockedIds: string[], startVertex: string, endVertex: string) => dispatch(DFSGraphSearch(adjList, blockedIds, startVertex, endVertex)),\r\n        DijkstraGraphSearch: (adjList: Object, blockedIds: string[], startVertex: string, endVertex: string) => dispatch(DijkstraGraphSearch(adjList, blockedIds, startVertex, endVertex))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainApp))","import React from 'react';\r\nimport { withRouter } from 'react-router-dom'\r\nimport './Navbar.css'\r\n\r\nconst CustomNavbar = (props: any) => (\r\n    <div className='nav-bar'>\r\n        <div className='nav-bar-left'>\r\n            <div className='nav-element'\r\n                onClick={() => {\r\n                    props.history.push('/')\r\n                }}  \r\n            >DSA PLAYGROUND</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/sorting-visualizers')\r\n            }}>Sorting Visualizers</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Tree Data Structure</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Graph Data Structure</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Stacks, Queues and List</div>\r\n\r\n            <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/path-finders')    \r\n            }}>Path Finders</div>\r\n        </div>\r\n        <div className='nav-bar-right'>\r\n          <div className='nav-element' \r\n                onClick={() => {\r\n                    props.history.push('/under-construction')\r\n            }}>Random User</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default withRouter(CustomNavbar)","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport CustomNavbar from './navbar/Navbar'\r\n\r\nimport './MainPage.css'\r\n\r\nconst MainPage: React.FC = (props: any) => {\r\n    return (\r\n        <div className='main-page'>\r\n            <CustomNavbar />\r\n            <div className='under-construction'>\r\n                <h1>\r\n                    SITE UNDER CONSTRUCTION\r\n                </h1>\r\n                <div className='grid-view'>\r\n                    <div className='display-box' onClick={() => props.history.push('/sorting-visualizers')}>\r\n                        <i className=\"fas fa-chart-bar\" style={{fontSize: 32, marginRight: 10}}></i>\r\n                        <p style={{fontSize: 24}}>Sorting Visualizers</p>\r\n                    </div>\r\n                </div>\r\n                <div className='grid-view'>\r\n                    <div className='display-box' onClick={() => props.history.push('/path-finders')}>\r\n                        <i className=\"fas fa-road\" style={{fontSize: 32, marginRight: 10}}></i>\r\n                        <p style={{fontSize: 24}}>Path Finders</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(MainPage);","import React from 'react'\r\n\r\nconst UnderConstruction = () => {\r\n    return (\r\n        <h1>\r\n            WORKING ON IT\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default UnderConstruction","import React from 'react';\r\nimport './App.css';\r\nimport SortingVisualizers from './containers/sorting-visualizers/MainApp'\r\nimport PathFinders from './containers/path-finders/MainApp'\r\nimport MainPage from './components/main-page/MainPage'\r\n\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport UnderConstruction from './components/UnderConstruction';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/sorting-visualizers\" exact component={SortingVisualizers} />\r\n        <Route path=\"/path-finders\" exact component={PathFinders} />\r\n        <Route path=\"/\" component={MainPage} />\r\n      </Switch>\r\n      <Route path=\"/under-construction\" exact component={UnderConstruction} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\r\n\r\nlet initialState: {\r\n    arr: number[],\r\n    swappers: number[],\r\n    sorted: number[],\r\n    running: boolean\r\n} = {\r\n    arr: [],\r\n    swappers: [],\r\n    sorted: [],\r\n    running: false\r\n}\r\n\r\nconst reducer = (state = initialState, action: { type: string, payload: any }) => {\r\n    let arr = [];\r\n    switch (action.type) {\r\n        case actionTypes.GENERATE_NEW_ARRAY:\r\n            while (arr.length < action.payload.size) {\r\n                let r = Math.floor(Math.random() * 500) + 1;\r\n                if (arr.indexOf(r) === -1) arr.push(r);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                arr,\r\n                swappers: [],\r\n                sorted: []\r\n            }\r\n\r\n        case actionTypes.SET_RUNNING_TRUE:\r\n            return {\r\n                ...state,\r\n                running: true,\r\n                swappers: [],\r\n                sorted: []\r\n            }\r\n        \r\n        case actionTypes.SET_RUNNING_FALSE:\r\n            return {\r\n                ...state,\r\n                running: false\r\n            }\r\n\r\n        case actionTypes.BUBBLE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload]\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    swappers: action.payload\r\n                }\r\n            }\r\n\r\n        case actionTypes.SELECTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.INSERTION_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.MERGE_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.QUICK_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: Array.from(Array(action.payload).keys()),\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        case actionTypes.HEAP_SORT:\r\n            if (typeof (action.payload) === 'number') {\r\n                return {\r\n                    ...state,\r\n                    sorted: [...state.sorted, action.payload],\r\n                    swappers: []\r\n                }\r\n            }\r\n            else if (action.payload.length > 3) {\r\n                return {\r\n                    ...state,\r\n                    arr: action.payload\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                swappers: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\r\n\r\nlet initialState: {\r\n    adjacencyList: any,\r\n    pathList: string[],\r\n    visited: string[],\r\n    mazeBlocks: string[]\r\n} = {\r\n    adjacencyList: {},\r\n    pathList: [],\r\n    visited: [],\r\n    mazeBlocks: []\r\n}\r\n\r\nconst reducer = (state = initialState, action: { type: string, payload: any }) => {\r\n    let adjList: any\r\n    switch (action.type) {\r\n        case actionTypes.ADD_VERTEX:\r\n            adjList = { ...state.adjacencyList }\r\n            adjList[action.payload] = []\r\n            return {\r\n                ...state,\r\n                adjacencyList: adjList\r\n            }\r\n\r\n        case actionTypes.ADD_EDGE:\r\n            let { vertex1, vertex2 } = action.payload\r\n            adjList = { ...state.adjacencyList }\r\n            adjList[vertex1].push(vertex2)\r\n            adjList[vertex2].push(vertex1)\r\n            return {\r\n                ...state,\r\n                adjacencyList: adjList\r\n            }\r\n\r\n        case actionTypes.ANIMATE:\r\n            let { visited, path } = action.payload\r\n            return {\r\n                ...state,\r\n                visited: visited,\r\n                pathList: path\r\n            }\r\n\r\n        case actionTypes.MAZE_GEN:\r\n            let { blocks } = action.payload\r\n            return {\r\n                ...state,\r\n                mazeBlocks: blocks\r\n            }\r\n\r\n        case actionTypes.CLEAR_WALL_PATH:\r\n            return {\r\n                ...state,\r\n                mazeBlocks: [],\r\n                visited: [],\r\n                pathList: []\r\n            }\r\n\r\n        case actionTypes.CLEAR_PATH:\r\n            return {\r\n                ...state,\r\n                visited: [],\r\n                pathList: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import default style\r\nimport 'rsuite/dist/styles/rsuite-default.css'\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport arrayReducer from './store/reducers/sortAlgos'\r\nimport pathReducer from './store/reducers/pathAlgos'\r\n\r\nconst reducer = combineReducers({\r\n  array: arrayReducer,\r\n  pathFinders: pathReducer \r\n})\r\n\r\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\n\r\nconst store = createStore(reducer,  composeEnhancers(applyMiddleware(thunk)))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}